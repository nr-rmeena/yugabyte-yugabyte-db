---
--- Verify renaming on temp tables
---
CREATE TEMP TABLE temp_table(a int primary key, b int);
CREATE INDEX temp_table_b_idx ON temp_table(b);
ALTER INDEX temp_table_pkey RENAME TO temp_table_pkey_new;
ALTER INDEX temp_table_b_idx RENAME TO temp_table_b_idx_new;
---
--- Verify yb_db_admin role can ALTER table
---
CREATE TABLE foo(a INT UNIQUE);
CREATE TABLE bar(b INT);
ALTER TABLE bar ADD CONSTRAINT baz FOREIGN KEY (b) REFERENCES foo(a);
CREATE TABLE table_other(a int, b int);
CREATE INDEX index_table_other ON table_other(a);
CREATE USER regress_alter_table_user1;
SET SESSION AUTHORIZATION yb_db_admin;
ALTER TABLE table_other RENAME to table_new;
ALTER TABLE table_new OWNER TO regress_alter_table_user1;
ALTER TABLE bar DROP CONSTRAINT baz;
ALTER TABLE pg_database RENAME TO test; -- should fail
ERROR:  permission denied: "pg_database" is a system catalog
ALTER TABLE pg_tablespace OWNER TO regress_alter_table_user1; -- should fail
ERROR:  permission denied: "pg_tablespace" is a system catalog
---
--- Verify yb_db_admin role can ALTER index
---
ALTER INDEX index_table_other RENAME TO index_table_other_new;
RESET SESSION AUTHORIZATION;
DROP TABLE foo;
DROP TABLE bar;
DROP TABLE table_new;
DROP USER regress_alter_table_user1;
---
--- Verify alter table which requires table rewrite
---
--- Table without primary key index
--- Empty table case
CREATE TABLE no_pk_tbl(k INT);
ALTER TABLE no_pk_tbl ADD COLUMN s1 TIMESTAMP DEFAULT clock_timestamp();
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
ALTER TABLE no_pk_tbl ADD COLUMN v1 SERIAL;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
\d no_pk_tbl;
                                      Table "public.no_pk_tbl"
 Column |            Type             | Collation | Nullable |                Default                
--------+-----------------------------+-----------+----------+---------------------------------------
 k      | integer                     |           |          | 
 s1     | timestamp without time zone |           |          | clock_timestamp()
 v1     | integer                     |           | not null | nextval('no_pk_tbl_v1_seq'::regclass)

--- Non-empty case
INSERT INTO no_pk_tbl VALUES(1), (2), (3);
ALTER TABLE no_pk_tbl ADD COLUMN s2 TIMESTAMP DEFAULT clock_timestamp();
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
ALTER TABLE no_pk_tbl ADD COLUMN v2 SERIAL;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
\d no_pk_tbl;
                                      Table "public.no_pk_tbl"
 Column |            Type             | Collation | Nullable |                Default                
--------+-----------------------------+-----------+----------+---------------------------------------
 k      | integer                     |           |          | 
 s1     | timestamp without time zone |           |          | clock_timestamp()
 v1     | integer                     |           | not null | nextval('no_pk_tbl_v1_seq'::regclass)
 s2     | timestamp without time zone |           |          | clock_timestamp()
 v2     | integer                     |           | not null | nextval('no_pk_tbl_v2_seq'::regclass)

DROP TABLE no_pk_tbl;
--- Table with primary key index
--- Empty table case
CREATE TABLE pk_tbl(k INT PRIMARY KEY);
ALTER TABLE pk_tbl ADD COLUMN s1 TIMESTAMP DEFAULT clock_timestamp();
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
ALTER TABLE pk_tbl ADD COLUMN v1 SERIAL;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
\d pk_tbl;
                                      Table "public.pk_tbl"
 Column |            Type             | Collation | Nullable |              Default               
--------+-----------------------------+-----------+----------+------------------------------------
 k      | integer                     |           | not null | 
 s1     | timestamp without time zone |           |          | clock_timestamp()
 v1     | integer                     |           | not null | nextval('pk_tbl_v1_seq'::regclass)
Indexes:
    "pk_tbl_pkey" PRIMARY KEY, lsm (k HASH)

--- Non-empty case
INSERT INTO pk_tbl VALUES(1), (2), (3);
ALTER TABLE pk_tbl ADD COLUMN s2 TIMESTAMP DEFAULT clock_timestamp();
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
ALTER TABLE pk_tbl ADD COLUMN v2 SERIAL;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
\d pk_tbl;
                                      Table "public.pk_tbl"
 Column |            Type             | Collation | Nullable |              Default               
--------+-----------------------------+-----------+----------+------------------------------------
 k      | integer                     |           | not null | 
 s1     | timestamp without time zone |           |          | clock_timestamp()
 v1     | integer                     |           | not null | nextval('pk_tbl_v1_seq'::regclass)
 s2     | timestamp without time zone |           |          | clock_timestamp()
 v2     | integer                     |           | not null | nextval('pk_tbl_v2_seq'::regclass)
Indexes:
    "pk_tbl_pkey" PRIMARY KEY, lsm (k HASH)

DROP TABLE pk_tbl;
-- Verify cache cleanup of table names when TABLE RENAME fails.
CREATE TABLE rename_test (id int);
SET yb_test_fail_next_ddl TO true;
ALTER TABLE rename_test RENAME TO foobar;
ERROR:  Failed DDL operation as requested
-- The table name must be unchanged.
SELECT * FROM rename_test;
 id
----
(0 rows)

-- The name 'foobar' must be invalid.
SELECT * FROM foobar;
ERROR:  relation "foobar" does not exist
LINE 1: SELECT * FROM foobar;
                      ^
-- Rename operation must succeed now.
ALTER TABLE rename_test RENAME TO foobar;
DROP TABLE foobar;
--
-- ALTER TABLE ADD COLUMN ... DEFAULT tests.
--
CREATE TABLE foo(a int);
INSERT INTO foo VALUES (1), (2), (3);
-- Test add column with int default value.
ALTER TABLE foo ADD COLUMN b int DEFAULT 6;
INSERT INTO foo(a) VALUES (4);
INSERT INTO foo VALUES (5, 7);
INSERT INTO foo VALUES (6, null);
SELECT * FROM foo ORDER BY a;
 a | b 
---+---
 1 | 6
 2 | 6
 3 | 6
 4 | 6
 5 | 7
 6 |  
(6 rows)

CREATE TYPE typefoo AS (a inet, b BIT(3));
-- Test add column with a UDT default value.
ALTER TABLE foo ADD COLUMN c typefoo DEFAULT ('127.0.0.1', B'010');
SELECT * FROM foo ORDER BY a;
 a | b |        c        
---+---+-----------------
 1 | 6 | (127.0.0.1,010)
 2 | 6 | (127.0.0.1,010)
 3 | 6 | (127.0.0.1,010)
 4 | 6 | (127.0.0.1,010)
 5 | 7 | (127.0.0.1,010)
 6 |   | (127.0.0.1,010)
(6 rows)

CREATE FUNCTION functionfoo()
RETURNS TIMESTAMP
LANGUAGE plpgsql STABLE
AS
$$
BEGIN
RETURN '01-01-2023';
END;
$$;
-- Test add column with a non-volatile expression default value.
ALTER TABLE foo ADD COLUMN d TIMESTAMP DEFAULT functionfoo();
SELECT * FROM foo ORDER BY a;
 a | b |        c        |            d             
---+---+-----------------+--------------------------
 1 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023
 2 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023
 3 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023
 4 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023
 5 | 7 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023
 6 |   | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023
(6 rows)

-- Test add column with default value and collation
ALTER TABLE foo ADD COLUMN e varchar DEFAULT 'hi' COLLATE "en_US";
INSERT INTO foo(a, e) VALUES(7, 'a');
INSERT INTO foo(a, e) VALUES(8, 'zz');
SELECT * FROM foo ORDER BY e, a;
 a | b |        c        |            d             | e  
---+---+-----------------+--------------------------+----
 7 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | a
 1 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 2 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 3 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 4 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 5 | 7 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 6 |   | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 8 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | zz
(8 rows)

SELECT * FROM foo WHERE e COLLATE "C" < 'hi' ORDER BY e;
 a | b |        c        |            d             | e 
---+---+-----------------+--------------------------+---
 7 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | a
(1 row)

-- Test updating columns that have missing default values.
UPDATE foo SET d = '01-01-2024' WHERE a = 1;
SELECT * FROM foo ORDER BY a;
 a | b |        c        |            d             | e  
---+---+-----------------+--------------------------+----
 1 | 6 | (127.0.0.1,010) | Mon Jan 01 00:00:00 2024 | hi
 2 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 3 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 4 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 5 | 7 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 6 |   | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 7 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | a
 8 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | zz
(8 rows)

UPDATE foo SET b = 8 WHERE b is null;
SELECT * FROM foo WHERE b = 8;
 a | b |        c        |            d             | e  
---+---+-----------------+--------------------------+----
 6 | 8 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
(1 row)

UPDATE foo SET b = null WHERE b = 8;
SELECT * FROM foo WHERE b is null;
 a | b |        c        |            d             | e  
---+---+-----------------+--------------------------+----
 6 |   | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
(1 row)

-- Test expression pushdown on column with default value.
EXPLAIN SELECT * FROM foo WHERE d = '01-01-2023';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Seq Scan on foo  (cost=0.00..102.50 rows=1000 width=80)
   Remote Filter: (d = 'Sun Jan 01 00:00:00 2023'::timestamp without time zone)
(2 rows)

SELECT * FROM foo WHERE b = 6 ORDER BY a;
 a | b |        c        |            d             | e  
---+---+-----------------+--------------------------+----
 1 | 6 | (127.0.0.1,010) | Mon Jan 01 00:00:00 2024 | hi
 2 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 3 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 4 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 7 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | a
 8 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | zz
(6 rows)

-- Verify that we set pg_attribute.atthasmissing and
-- pg_attribute.attmissingval.
SELECT atthasmissing, attmissingval FROM pg_attribute
    WHERE attrelid='foo'::regclass;
 atthasmissing |        attmissingval 
---------------+------------------------------
 f             | 
 f             | 
 f             | 
 f             | 
 f             | 
 f             | 
 f             | 
 t             | {6}
 t             | {"(127.0.0.1,010)"}
 t             | {"Sun Jan 01 00:00:00 2023"}
 t             | {hi}
(11 rows)

-- Verify that ALTER TABLE ... SET DEFAULT doesn't change missing values.
ALTER TABLE foo ALTER COLUMN b SET DEFAULT 7;
INSERT INTO foo(a) VALUES (9);
SELECT * FROM foo ORDER BY a;
 a | b |        c        |            d             | e  
---+---+-----------------+--------------------------+----
 1 | 6 | (127.0.0.1,010) | Mon Jan 01 00:00:00 2024 | hi
 2 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 3 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 4 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 5 | 7 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 6 |   | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 7 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | a
 8 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | zz
 9 | 7 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
(9 rows)

-- Verify that indexes on columns with missing default values work.
CREATE INDEX ON foo(b);
EXPLAIN SELECT b FROM foo WHERE b = 6;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Index Only Scan using foo_b_idx on foo  (cost=0.00..5.12 rows=10 width=4)
   Index Cond: (b = 6)
(2 rows)

SELECT b FROM foo WHERE b = 6;
 b 
---
 6
 6
 6
 6
 6
 6
(6 rows)

EXPLAIN SELECT * FROM foo WHERE b = 6 ORDER BY a;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort  (cost=5.39..5.42 rows=10 width=80)
   Sort Key: a
   ->  Index Scan using foo_b_idx on foo  (cost=0.00..5.22 rows=10 width=80)
         Index Cond: (b = 6)
(4 rows)

SELECT * FROM foo WHERE b = 6 ORDER BY a;
 a | b |        c        |            d             | e  
---+---+-----------------+--------------------------+----
 1 | 6 | (127.0.0.1,010) | Mon Jan 01 00:00:00 2024 | hi
 2 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 3 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 4 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 7 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | a
 8 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | zz
(6 rows)

-- Verify that defaults are copied for tables created using CREATE TABLE LIKE
-- clause.
CREATE TABLE dummy (LIKE foo INCLUDING DEFAULTS);
INSERT INTO dummy(a) VALUES (1);
SELECT * FROM dummy;
 a | b |        c        |            d             | e  
---+---+-----------------+--------------------------+----
 1 | 7 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
(1 row)

-- Verify that missing values work after table rewrite.
ALTER TABLE foo ADD PRIMARY KEY (a);
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
SELECT * FROM foo ORDER BY a;
 a | b |        c        |            d             | e  
---+---+-----------------+--------------------------+----
 1 | 6 | (127.0.0.1,010) | Mon Jan 01 00:00:00 2024 | hi
 2 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 3 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 4 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 5 | 7 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 6 |   | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
 7 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | a
 8 | 6 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | zz
 9 | 7 | (127.0.0.1,010) | Sun Jan 01 00:00:00 2023 | hi
(9 rows)

-- Verify missing default values for partitioned tables.
CREATE TABLE foo_part (a int) PARTITION BY RANGE (a);
CREATE TABLE foo_part_1 PARTITION OF foo_part FOR VALUES FROM (1) TO (6);
CREATE TABLE foo_part_2 PARTITION OF foo_part FOR VALUES FROM (6) TO (11);
INSERT INTO foo_part VALUES (generate_series(1, 10));
CREATE FUNCTION functionfoopart()
RETURNS TEXT
LANGUAGE plpgsql STABLE
AS
$$
BEGIN
RETURN 'default';
END;
$$;
ALTER TABLE foo_part ADD COLUMN b TEXT default functionfoopart();
INSERT INTO foo_part VALUES (1, null), (6, null);
SELECT * FROM foo_part ORDER BY a, b;
 a  |    b    
----+---------
  1 | default
  1 | 
  2 | default
  3 | default
  4 | default
  5 | default
  6 | default
  6 | 
  7 | default
  8 | default
  9 | default
 10 | default
(12 rows)

-- Verify that ADD COLUMN ... DEFAULT NOT NULL fails when the default value is
-- null.
ALTER TABLE foo ADD COLUMN g int DEFAULT null NOT NULL;
ERROR:  column "g" contains null values
-- Test add column with volatile default value.
ALTER TABLE foo ADD COLUMN f FLOAT DEFAULT random();
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
--
-- ALTER TABLE with table rewrite tests.
--
-- Test add column operation with table rewrite.
CREATE TABLESPACE test_tablespace LOCATION '/invalid';
WARNING:  LOCATION not supported yet and will be ignored
LINE 1: CREATE TABLESPACE test_tablespace LOCATION '/invalid';
                                          ^
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/6569. React with thumbs up to raise its priority
CREATE TABLE table_rewrite_test1
    (a int, b int, drop_me int, username text, PRIMARY KEY (a ASC))
    TABLESPACE test_tablespace;
ALTER TABLE table_rewrite_test1 DROP COLUMN drop_me;
INSERT INTO table_rewrite_test1
    VALUES(1, 1, 'user1'), (2, 2, 'user2'), (3, 3, 'user3');
-- create some dependencies on the table.
-- 1. check constraint.
ALTER TABLE table_rewrite_test1 ADD CONSTRAINT a_check CHECK(a > 0);
-- 2. index.
CREATE UNIQUE INDEX test_index ON table_rewrite_test1(b)
    TABLESPACE test_tablespace;
-- 3. foreign key constraint.
CREATE TABLE table_rewrite_test1_fk(a int REFERENCES table_rewrite_test1(b));
-- 4. dependent view.
CREATE VIEW table_rewrite_test1_view AS SELECT * FROM table_rewrite_test1;
-- 5. column with missing default value.
ALTER TABLE table_rewrite_test1 ADD COLUMN c int DEFAULT 5;
-- 6. dependent trigger.
CREATE FUNCTION dummy() RETURNS TRIGGER
AS $$
BEGIN
    RETURN NULL;
END;
$$ LANGUAGE PLPGSQL;
CREATE TRIGGER dummy_trigger
    AFTER INSERT
    ON table_rewrite_test1
    FOR EACH ROW
    EXECUTE PROCEDURE dummy();
-- 6. enable RLS and create policy objects.
ALTER TABLE table_rewrite_test1 ENABLE ROW LEVEL SECURITY;
CREATE USER user1;
CREATE POLICY p ON table_rewrite_test1
    FOR SELECT TO user1 USING (username = CURRENT_USER);
GRANT SELECT ON table_rewrite_test1 TO user1;
-- 7. extended statistics object.
CREATE STATISTICS s1(dependencies) ON a, b FROM table_rewrite_test1;
-- perform several table rewrite operations.
ALTER TABLE table_rewrite_test1 ADD COLUMN d SERIAL, ADD COLUMN e BIGSERIAL;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
ALTER TABLE table_rewrite_test1
    ADD COLUMN f timestamp DEFAULT clock_timestamp();
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
-- verify table data.
SELECT a, b, username, c, d, e FROM table_rewrite_test1 ORDER BY a;
 a | b | username | c | d | e 
---+---+----------+---+---+---
 1 | 1 | user1    | 5 | 1 | 1
 2 | 2 | user2    | 5 | 2 | 2
 3 | 3 | user3    | 5 | 3 | 3
(3 rows)

-- verify that we preserved dependent objects.
\d table_rewrite_test1;
                                       Table "public.table_rewrite_test1"
  Column  |            Type             | Collation | Nullable |                    Default                     
----------+-----------------------------+-----------+----------+------------------------------------------------
 a        | integer                     |           | not null | 
 b        | integer                     |           |          | 
 username | text                        |           |          | 
 c        | integer                     |           |          | 5
 d        | integer                     |           | not null | nextval('table_rewrite_test1_d_seq'::regclass)
 e        | bigint                      |           | not null | nextval('table_rewrite_test1_e_seq'::regclass)
 f        | timestamp without time zone |           |          | clock_timestamp()
Indexes:
    "table_rewrite_test1_pkey" PRIMARY KEY, lsm (a ASC), tablespace "test_tablespace"
    "test_index" UNIQUE, lsm (b HASH), tablespace "test_tablespace"
Check constraints:
    "a_check" CHECK (a > 0)
Referenced by:
    TABLE "table_rewrite_test1_fk" CONSTRAINT "table_rewrite_test1_fk_a_fkey" FOREIGN KEY (a) REFERENCES table_rewrite_test1(b)
Policies:
    POLICY "p" FOR SELECT
      TO user1
      USING ((username = (CURRENT_USER)::text))
Statistics objects:
    "public"."s1" (dependencies) ON a, b FROM table_rewrite_test1
Triggers:
    dummy_trigger AFTER INSERT ON table_rewrite_test1 FOR EACH ROW EXECUTE PROCEDURE dummy()
Tablespace: "test_tablespace"

\d test_index;
      Index "public.test_index"
 Column |  Type   | Key? | Definition 
--------+---------+------+------------
 b      | integer | yes  | b
unique, lsm, for table "public.table_rewrite_test1"
Tablespace: "test_tablespace"

SELECT * FROM table_rewrite_test1_view ORDER BY a;
 a | b | username 
---+---+----------
 1 | 1 | user1
 2 | 2 | user2
 3 | 3 | user3
(3 rows)

SELECT a, b, username, c, d, e FROM table_rewrite_test1 WHERE b = 3;
 a | b | username | c | d | e 
---+---+----------+---+---+---
 3 | 3 | user3    | 5 | 3 | 3
(1 row)

-- verify PK constraint.
INSERT INTO table_rewrite_test1 VALUES (3); -- should fail.
ERROR:  duplicate key value violates unique constraint "table_rewrite_test1_pkey"
-- verify FK constraint.
INSERT INTO table_rewrite_test1_fk(a) VALUES (3);
INSERT INTO table_rewrite_test1_fk(a) VALUES (4); -- should fail.
ERROR:  insert or update on table "table_rewrite_test1_fk" violates foreign key constraint "table_rewrite_test1_fk_a_fkey"
DETAIL:  Key (a)=(4) is not present in table "table_rewrite_test1".
INSERT INTO table_rewrite_test1(a, b) VALUES (4, 4);
INSERT INTO table_rewrite_test1_fk(a) VALUES (4);
DELETE FROM table_rewrite_test1_fk;
DELETE FROM table_rewrite_test1 WHERE b = 3;
INSERT INTO table_rewrite_test1_fk VALUES (3); -- should fail.
ERROR:  insert or update on table "table_rewrite_test1_fk" violates foreign key constraint "table_rewrite_test1_fk_a_fkey"
DETAIL:  Key (a)=(3) is not present in table "table_rewrite_test1".
-- verify policies and RLS.
SET ROLE user1;
SELECT a, b, username, c, d, e FROM table_rewrite_test1 ORDER BY a;
 a | b | username | c | d | e 
---+---+----------+---+---+---
 1 | 1 | user1    | 5 | 1 | 1
(1 row)

SET ROLE yugabyte;
-- verify ALTER TABLE ... ADD COLUMN ... PRIMARY KEY works.
DELETE FROM table_rewrite_test1 WHERE a != 1;
ALTER TABLE table_rewrite_test1 DROP CONSTRAINT table_rewrite_test1_pkey;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
SET ddl_rollback_enabled = ON;
ALTER TABLE table_rewrite_test1 ADD COLUMN g SERIAL PRIMARY KEY;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
SET ddl_rollback_enabled = OFF;
INSERT INTO table_rewrite_test1(a, g) VALUES (2, 1); -- should fail.
ERROR:  duplicate key value violates unique constraint "table_rewrite_test1_pkey"
INSERT INTO table_rewrite_test1(a, g) VALUES (2, 2);
SELECT a, b, username, c, d, e, g FROM table_rewrite_test1;
 a | b | username | c |  d  |  e  | g 
---+---+----------+---+-----+-----+---
 1 | 1 | user1    | 5 |   1 |   1 | 1
 2 |   |          | 5 | 104 | 104 | 2
(2 rows)

-- verify future ALTER operations on the table succeed.
ALTER TABLE table_rewrite_test1 ADD COLUMN h int, DROP COLUMN a CASCADE;
NOTICE:  drop cascades to view table_rewrite_test1_view
ALTER TABLE table_rewrite_test1 RENAME TO table_rewrite_test1_new;
-- cleanup.
DROP TABLE table_rewrite_test1_new CASCADE;
NOTICE:  drop cascades to constraint table_rewrite_test1_fk_a_fkey on table table_rewrite_test1_fk
DROP USER user1;
-- Test table rewrite operations on a partitioned table.
CREATE TABLE table_rewrite_test2(a int, PRIMARY KEY (a ASC)) PARTITION BY RANGE (a);
CREATE TABLE table_rewrite_test2_part1 PARTITION OF table_rewrite_test2 FOR VALUES FROM (1) TO (6);
CREATE TABLE table_rewrite_test2_part2 PARTITION OF table_rewrite_test2 FOR VALUES FROM (6) TO (11);
INSERT INTO table_rewrite_test2 VALUES(generate_series(1, 10));
ALTER TABLE table_rewrite_test2 ADD COLUMN b SERIAL;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
SELECT * FROM table_rewrite_test2;
 a  | b  
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(10 rows)

-- Verify that split options are preserved after a ADD COLUMN table rewrite operation.
CREATE TABLE table_rewrite_test3(a int PRIMARY KEY, b int)
    SPLIT INTO 2 TABLETS;
CREATE INDEX table_rewrite_test3_b_idx ON table_rewrite_test3(b ASC)
    SPLIT AT VALUES ((5), (10));
ALTER TABLE table_rewrite_test3 ADD COLUMN c SERIAL;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
SELECT num_tablets, num_hash_key_columns FROM
    yb_table_properties('table_rewrite_test3'::regclass);
 num_tablets | num_hash_key_columns 
-------------+----------------------
           2 |                    1
(1 row)

SELECT yb_get_range_split_clause('table_rewrite_test3_b_idx'::regclass);
  yb_get_range_split_clause  
-----------------------------
 SPLIT AT VALUES ((5), (10))
(1 row)

-- Test table rewrite on temp tables.
CREATE TEMP TABLE temp_table_rewrite_test(a int);
INSERT INTO temp_table_rewrite_test VALUES(1), (2), (3);
CREATE INDEX ON temp_table_rewrite_test(a);
ALTER TABLE temp_table_rewrite_test ADD COLUMN c SERIAL;
SELECT * FROM temp_table_rewrite_test ORDER BY a;
 a | c 
---+---
 1 | 1
 2 | 2
 3 | 3
(3 rows)

-- Test rewrite on a colocated table.
CREATE DATABASE mydb WITH colocation = true;
\c mydb;
CREATE TABLE base (col int PRIMARY KEY, col2 int);
CREATE INDEX base_idx ON base(col2);
INSERT INTO base VALUES (1, 3), (2, 2), (3, 1);
ALTER TABLE base ADD COLUMN col3 SERIAL;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
SELECT * FROM base;
 col | col2 | col3 
-----+------+------
   1 |    3 |    1
   2 |    2 |    2
   3 |    1 |    3
(3 rows)

SELECT * FROM base WHERE col2 = 1;
 col | col2 | col3 
-----+------+------
   3 |    1 |    3
(1 row)

\d+ base;
                                                 Table "public.base"
 Column |  Type   | Collation | Nullable |              Default               | Storage | Stats target | Description 
--------+---------+-----------+----------+------------------------------------+---------+--------------+-------------
 col    | integer |           | not null |                                    | plain   |              | 
 col2   | integer |           |          |                                    | plain   |              | 
 col3   | integer |           | not null | nextval('base_col3_seq'::regclass) | plain   |              | 
Indexes:
    "base_pkey" PRIMARY KEY, lsm (col ASC), colocation: true
    "base_idx" lsm (col2 ASC), colocation: true
Colocation: true

SELECT num_tablets, num_hash_key_columns, is_colocated FROM
    yb_table_properties('base_idx'::regclass);
 num_tablets | num_hash_key_columns | is_colocated 
-------------+----------------------+--------------
           1 |                    0 | t
(1 row)

SELECT * FROM base;
 col | col2 | col3 
-----+------+------
   1 |    3 |    1
   2 |    2 |    2
   3 |    1 |    3
(3 rows)

CREATE TABLE base2 (col int PRIMARY KEY, col2 int) WITH (COLOCATION=false);
CREATE INDEX base2_idx ON base2(col2);
INSERT INTO base VALUES (1), (2), (3);
ERROR:  duplicate key value violates unique constraint "base_pkey"
ALTER TABLE base2 ADD COLUMN col3 SERIAL;
NOTICE:  table rewrite may lead to inconsistencies
DETAIL:  Concurrent DMLs may not be reflected in the new table.
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/19860. Set 'ysql_suppress_unsafe_alter_notice' yb-tserver gflag to true to suppress this notice.
SELECT * FROM base;
 col | col2 | col3 
-----+------+------
   1 |    3 |    1
   2 |    2 |    2
   3 |    1 |    3
(3 rows)

SELECT * FROM base WHERE col2 = 1;
 col | col2 | col3 
-----+------+------
   3 |    1 |    3
(1 row)

\d+ base2;
                                                 Table "public.base2"
 Column |  Type   | Collation | Nullable |               Default               | Storage | Stats target | Description 
--------+---------+-----------+----------+-------------------------------------+---------+--------------+-------------
 col    | integer |           | not null |                                     | plain   |              | 
 col2   | integer |           |          |                                     | plain   |              | 
 col3   | integer |           | not null | nextval('base2_col3_seq'::regclass) | plain   |              | 
Indexes:
    "base2_pkey" PRIMARY KEY, lsm (col HASH)
    "base2_idx" lsm (col2 HASH)
Options: colocation=false

SELECT num_tablets, num_hash_key_columns, is_colocated FROM
    yb_table_properties('base2_idx'::regclass);
 num_tablets | num_hash_key_columns | is_colocated 
-------------+----------------------+--------------
           3 |                    1 | f
(1 row)
