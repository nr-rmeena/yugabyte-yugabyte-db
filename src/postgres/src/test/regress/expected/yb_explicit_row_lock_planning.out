--
-- YB tests for locking
--
CREATE TABLE yb_locks_t (k int PRIMARY KEY);
INSERT INTO yb_locks_t VALUES (1),(2),(3),(4),(5);
CREATE TABLE yb_locks_t2 (k1 int, k2 int, k3 int, v int, PRIMARY KEY(k1, k2, k3));
INSERT INTO yb_locks_t2 VALUES (1,2,3,4),(5,6,7,8);
SET yb_lock_pk_single_rpc TO ON;
-- Test plain (unlocked case).
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5;
                   QUERY PLAN                   
------------------------------------------------
 Index Scan using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5;
 k 
---
 5
(1 row)

-- Test single-RPC select+lock (no LockRows node).
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
 k 
---
 5
(1 row)

-- Test other types of locking.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR SHARE;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Index Scan (Locked FOR SHARE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR SHARE;
 k 
---
 5
(1 row)

EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR NO KEY UPDATE;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Index Scan (Locked FOR NO KEY UPDATE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR NO KEY UPDATE;
 k 
---
 5
(1 row)

EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR KEY SHARE;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Index Scan (Locked FOR KEY SHARE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR KEY SHARE;
 k 
---
 5
(1 row)

-- Test LockRows node (more RPCs), and scan is unlocked.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t FOR UPDATE;
          QUERY PLAN          
------------------------------
 LockRows
   ->  Seq Scan on yb_locks_t
(2 rows)

SELECT * FROM yb_locks_t FOR UPDATE;
 k 
---
 5
 1
 4
 2
 3
(5 rows)

-- Test with multi-column primary key.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2 WHERE k1=1 AND k2=2 AND k3=3 FOR UPDATE;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Index Scan (Locked FOR UPDATE) using yb_locks_t2_pkey on yb_locks_t2
   Index Cond: ((k1 = 1) AND (k2 = 2) AND (k3 = 3))
(2 rows)

SELECT * FROM yb_locks_t2 WHERE k1=1 AND k2=2 AND k3=3 FOR UPDATE;
 k1 | k2 | k3 | v 
----+----+----+---
  1 |  2 |  3 | 4
(1 row)

-- Test with partial column set for primary key (should use LockRows).
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2 WHERE k1=1 AND k2=2 FOR UPDATE;
                       QUERY PLAN                       
--------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_t2_pkey on yb_locks_t2
         Index Cond: ((k1 = 1) AND (k2 = 2))
(3 rows)

SELECT * FROM yb_locks_t2 WHERE k1=1 AND k2=2 FOR UPDATE;
 k1 | k2 | k3 | v 
----+----+----+---
  1 |  2 |  3 | 4
(1 row)

-- Test LockRows node is used for join.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2, yb_locks_t WHERE yb_locks_t2.k1 = yb_locks_t.k FOR UPDATE;
                         QUERY PLAN                         
------------------------------------------------------------
 LockRows
   ->  Nested Loop
         ->  Seq Scan on yb_locks_t2
         ->  Index Scan using yb_locks_t_pkey on yb_locks_t
               Index Cond: (k = yb_locks_t2.k1)
(5 rows)

SELECT * FROM yb_locks_t2, yb_locks_t WHERE yb_locks_t2.k1 = yb_locks_t.k FOR UPDATE;
 k1 | k2 | k3 | v | k 
----+----+----+---+---
  5 |  6 |  7 | 8 | 5
  1 |  2 |  3 | 4 | 1
(2 rows)

-- In isolation level SERIALIZABLE, all locks are done during scans.
BEGIN ISOLATION LEVEL SERIALIZABLE;
-- Test same locking as for REPEATABLE READ (default isolation).
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
 k 
---
 5
(1 row)

-- Test no LockRows node for sequential scan.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t FOR UPDATE;
                 QUERY PLAN                 
--------------------------------------------
 Seq Scan (Locked FOR UPDATE) on yb_locks_t
(1 row)

SELECT * FROM yb_locks_t FOR UPDATE;
 k 
---
 5
 1
 4
 2
 3
(5 rows)

-- Test no LockRows node for join.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2, yb_locks_t WHERE yb_locks_t2.k1 = yb_locks_t.k FOR UPDATE;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Nested Loop
   ->  Seq Scan (Locked FOR UPDATE) on yb_locks_t2
   ->  Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
         Index Cond: (k = yb_locks_t2.k1)
(4 rows)

SELECT * FROM yb_locks_t2, yb_locks_t WHERE yb_locks_t2.k1 = yb_locks_t.k FOR UPDATE;
 k1 | k2 | k3 | v | k 
----+----+----+---+---
  5 |  6 |  7 | 8 | 5
  1 |  2 |  3 | 4 | 1
(2 rows)

COMMIT;
-- Test with single-RPC select+lock turned off.
SET yb_lock_pk_single_rpc TO OFF;
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
                      QUERY PLAN                      
------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_t_pkey on yb_locks_t
         Index Cond: (k = 5)
(3 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
 k 
---
 5
(1 row)

-- Test that with the yb_lock_pk_single_rpc off, SERIALIZABLE still locks during the scan
-- (no LockRows).
BEGIN ISOLATION LEVEL SERIALIZABLE;
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
 k 
---
 5
(1 row)

COMMIT;
SET yb_lock_pk_single_rpc TO ON;
CREATE INDEX ON yb_locks_t2 (v);
-- Test with an index. We use a LockRows node for an index.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
                       QUERY PLAN                        
---------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_t2_v_idx on yb_locks_t2
         Index Cond: (v = 4)
(3 rows)

SELECT * FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
 k1 | k2 | k3 | v 
----+----+----+---
  1 |  2 |  3 | 4
(1 row)

-- Test only the indexed column.
EXPLAIN (COSTS OFF)
SELECT v FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
                       QUERY PLAN                        
---------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_t2_v_idx on yb_locks_t2
         Index Cond: (v = 4)
(3 rows)

SELECT v FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
 v 
---
 4
(1 row)

-- Isolation level SERIALIZABLE still locks with the scan though (no LockRows).
BEGIN ISOLATION LEVEL SERIALIZABLE;
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Index Scan (Locked FOR UPDATE) using yb_locks_t2_v_idx on yb_locks_t2
   Index Cond: (v = 4)
(2 rows)

SELECT * FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
 k1 | k2 | k3 | v 
----+----+----+---
  1 |  2 |  3 | 4
(1 row)

COMMIT;
-- Test partitions.
CREATE TABLE yb_locks_partition (a char PRIMARY KEY) PARTITION BY LIST (a);
CREATE TABLE yb_locks_partition_default PARTITION OF yb_locks_partition DEFAULT;
CREATE TABLE yb_locks_partition_a PARTITION OF yb_locks_partition FOR VALUES IN ('a');
EXPLAIN (COSTS OFF) SELECT * FROM yb_locks_partition WHERE a = 'a' FOR UPDATE;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 LockRows
   ->  Append
         ->  Index Scan using yb_locks_partition_a_pkey on yb_locks_partition_a
               Index Cond: (a = 'a'::bpchar)
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM yb_locks_partition WHERE a = 'b' FOR UPDATE;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 LockRows
   ->  Append
         ->  Index Scan using yb_locks_partition_default_pkey on yb_locks_partition_default
               Index Cond: (a = 'b'::bpchar)
(4 rows)

BEGIN ISOLATION LEVEL SERIALIZABLE;
EXPLAIN (COSTS OFF) SELECT * FROM yb_locks_partition WHERE a = 'a' FOR UPDATE;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Append
   ->  Index Scan (Locked FOR UPDATE) using yb_locks_partition_a_pkey on yb_locks_partition_a
         Index Cond: (a = 'a'::bpchar)
(3 rows)

COMMIT;
-- Test JSON.
EXPLAIN (COSTS OFF, FORMAT JSON)
SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
               QUERY PLAN               
----------------------------------------
 [                                     +
   {                                   +
     "Plan": {                         +
       "Node Type": "Index Scan",      +
       "Parallel Aware": false,        +
       "Lock Type": "FOR UPDATE",      +
       "Scan Direction": "Forward",    +
       "Index Name": "yb_locks_t_pkey",+
       "Relation Name": "yb_locks_t",  +
       "Alias": "yb_locks_t",          +
       "Index Cond": "(k = 5)"         +
     }                                 +
   }                                   +
 ]
(1 row)

DROP TABLE yb_locks_t, yb_locks_t2, yb_locks_partition;
