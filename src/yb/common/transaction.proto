// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

syntax = "proto2";

package yb;

option java_package = "org.yb";

enum IsolationLevel {
  NON_TRANSACTIONAL = 0;
  SNAPSHOT_ISOLATION = 1;
  SERIALIZABLE_ISOLATION = 2;
  READ_COMMITTED = 3;
}

enum TransactionStatus {
  CREATED = 1;
  PENDING = 2;

  COMMITTED = 4;
  SEALED = 5;
  APPLIED_IN_ALL_INVOLVED_TABLETS = 7;

  ABORTED = 8;

  PROMOTED = 9;

  // All following entries are not used in RAFT, but as events between status tablet and involved
  // tablets:
  APPLYING = 20;
  APPLIED_IN_ONE_OF_INVOLVED_TABLETS = 21;
  IMMEDIATE_CLEANUP = 22;
  GRACEFUL_CLEANUP = 23;
}

enum TransactionLocality {
  GLOBAL = 1;
  LOCAL = 2;
}

// This enum matches enum RowMarkType defined in src/include/nodes/plannodes.h.
// The exception is ROW_MARK_ABSENT, which signifies the absence of a row mark.
enum RowMarkType {
  // Obtain exclusive tuple lock.
  ROW_MARK_EXCLUSIVE = 0;

  // Obtain no-key exclusive tuple lock.
  ROW_MARK_NOKEYEXCLUSIVE = 1;

  // Obtain shared tuple lock.
  ROW_MARK_SHARE = 2;

  // Obtain keyshare tuple lock.
  ROW_MARK_KEYSHARE = 3;

  // Not supported. Used for postgres compatibility.
  ROW_MARK_REFERENCE = 4;

  // Not supported. Used for postgres compatibility.
  ROW_MARK_COPY = 5;

  // Obtain no tuple lock (this should never sent be on the wire).  The value
  // should be high for convenient comparisons with the other row lock types.
  ROW_MARK_ABSENT = 15;
}

message SubtxnSetPB {
  repeated uint32 set = 1;
}

message SubTransactionMetadataPB {
  optional uint32 subtransaction_id = 1;

  optional SubtxnSetPB aborted = 2;
}

enum LockMode {
  WEAK_READ = 0;
  WEAK_WRITE = 1;
  STRONG_READ = 2;
  STRONG_WRITE = 3;
}

message LockInfoPB {
  // TODO(pglocks): https://github.com/yugabyte/yugabyte-db/issues/15908
  // We should consider the following potential optimizations:
  // 1. Group lock information by transaction_id to avoid repeated transaction_ids
  // 2. Omit prefix locks, which are implied to exist if their fully-qualified forms are present
  repeated bytes hash_cols = 1;

  repeated bytes range_cols = 2;

  optional uint32 column_id = 3;

  optional bool is_full_pk = 4;

  optional fixed64 wait_start_ht = 5;

  // If this is set, then the lock has been granted.
  optional fixed64 wait_end_ht = 6;

  // If empty, this is a single-shard transaction.
  optional bytes transaction_id = 7;

  optional uint32 subtransaction_id = 8;

  optional bool is_explicit = 9;

  repeated LockMode modes = 10;
}

message TabletLockInfoPB {
  optional bytes table_id = 1;

  optional bytes tablet_id = 2;

  repeated LockInfoPB locks = 3;
}
