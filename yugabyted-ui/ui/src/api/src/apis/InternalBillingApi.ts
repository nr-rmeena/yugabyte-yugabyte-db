// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  AggregateResponse,
  AggregateSpec,
  ApiError,
  CreditResponse,
  CreditSpec,
  GlobalRateCardResponse,
  GlobalRateCardSpec,
  InvoiceResponse,
  RateCardResponse,
  RateCardSpec,
  SetAutomaticInvoiceGenerationResponse,
  SetAutomaticInvoiceGenerationSpec,
  UpdateBillingInvoiceResponse,
  UpdateBillingInvoiceSpec,
  UpdateCreditsResponse,
  UpdateCreditsSpec,
  UpdatePaymentMethodResponse,
  UpdatePaymentMethodSpec,
} from '../models';

export interface AddCreditToBillingAccountForQuery {
  accountId: string;
  CreditSpec?: CreditSpec;
}
export interface AggregateForQuery {
  accountId: string;
  AggregateSpec?: AggregateSpec;
}
export interface CreateRateCardForQuery {
  accountId: string;
  RateCardSpec?: RateCardSpec;
}
export interface DeleteInvoiceForQuery {
  accountId: string;
  invoiceId: string;
}
export interface GenerateInvoiceForQuery {
  accountId: string;
}
export interface SetAutomaticInvoiceGenerationForQuery {
  SetAutomaticInvoiceGenerationSpec?: SetAutomaticInvoiceGenerationSpec;
}
export interface UpdateBillingInvoiceForQuery {
  accountId: string;
  invoiceId: string;
  UpdateBillingInvoiceSpec?: UpdateBillingInvoiceSpec;
}
export interface UpdateCreditsForAccountForQuery {
  accountId: string;
  creditId: string;
  UpdateCreditsSpec?: UpdateCreditsSpec;
}
export interface UpdateGlobalRateCardForQuery {
  GlobalRateCardSpec?: GlobalRateCardSpec;
}
export interface UpdatePaymentMethodForQuery {
  accountId: string;
  UpdatePaymentMethodSpec?: UpdatePaymentMethodSpec;
}

/**
 * Add credits to the given account, 1 credit = 1 usd
 * API to add credits to the given account
 */


export const addCreditToBillingAccountMutate = (
  body: AddCreditToBillingAccountForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/billing/accounts/{accountId}/credits'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<CreditResponse>(
    {
      url,
      method: 'POST',
      data: body.CreditSpec
    },
    customAxiosInstance
  );
};

export const useAddCreditToBillingAccountMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<CreditResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<CreditResponse, Error, AddCreditToBillingAccountForQuery, unknown>((props) => {
    return  addCreditToBillingAccountMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Run daily billing aggregation
 * Run daily billing aggregation
 */


export const aggregateMutate = (
  body: AggregateForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/billing/accounts/{accountId}/invoice/aggregate'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<AggregateResponse>(
    {
      url,
      method: 'POST',
      data: body.AggregateSpec
    },
    customAxiosInstance
  );
};

export const useAggregateMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<AggregateResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<AggregateResponse, Error, AggregateForQuery, unknown>((props) => {
    return  aggregateMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Creates rate card for the account
 * Creates rate card for the account
 */


export const createRateCardMutate = (
  body: CreateRateCardForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/billing/accounts/{accountId}/rate_card'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<RateCardResponse>(
    {
      url,
      method: 'POST',
      data: body.RateCardSpec
    },
    customAxiosInstance
  );
};

export const useCreateRateCardMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<RateCardResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<RateCardResponse, Error, CreateRateCardForQuery, unknown>((props) => {
    return  createRateCardMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Delete billing invoice
 * Delete billing invoice
 */


export const deleteInvoiceMutate = (
  body: DeleteInvoiceForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/billing/accounts/{accountId}/invoices/{invoiceId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'invoiceId'}}`, encodeURIComponent(String(body.invoiceId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.invoiceId;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useDeleteInvoiceMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, DeleteInvoiceForQuery, unknown>((props) => {
    return  deleteInvoiceMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Generate an invoice for the account
 * Generate an invoice for the account
 */


export const generateInvoiceMutate = (
  body: GenerateInvoiceForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/billing/accounts/{accountId}/invoice/generate'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<InvoiceResponse>(
    {
      url,
      method: 'POST',
    },
    customAxiosInstance
  );
};

export const useGenerateInvoiceMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<InvoiceResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<InvoiceResponse, Error, GenerateInvoiceForQuery, unknown>((props) => {
    return  generateInvoiceMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Enable or disable automatic invoice generation
 * Enable or disable automatic invoice generation
 */


export const setAutomaticInvoiceGenerationMutate = (
  body: SetAutomaticInvoiceGenerationForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/billing/invoice/set_automatic_invoice_generation';
  return Axios<SetAutomaticInvoiceGenerationResponse>(
    {
      url,
      method: 'POST',
      data: body.SetAutomaticInvoiceGenerationSpec
    },
    customAxiosInstance
  );
};

export const useSetAutomaticInvoiceGenerationMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<SetAutomaticInvoiceGenerationResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<SetAutomaticInvoiceGenerationResponse, Error, SetAutomaticInvoiceGenerationForQuery, unknown>((props) => {
    return  setAutomaticInvoiceGenerationMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Update billing invoice
 * Update billing invoice
 */


export const updateBillingInvoiceMutate = (
  body: UpdateBillingInvoiceForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/billing/accounts/{accountId}/invoices/{invoiceId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'invoiceId'}}`, encodeURIComponent(String(body.invoiceId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.invoiceId;
  return Axios<UpdateBillingInvoiceResponse>(
    {
      url,
      method: 'PUT',
      data: body.UpdateBillingInvoiceSpec
    },
    customAxiosInstance
  );
};

export const useUpdateBillingInvoiceMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<UpdateBillingInvoiceResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<UpdateBillingInvoiceResponse, Error, UpdateBillingInvoiceForQuery, unknown>((props) => {
    return  updateBillingInvoiceMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Update credits for the given account
 * API to update credits for the given account
 */


export const updateCreditsForAccountMutate = (
  body: UpdateCreditsForAccountForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/billing/accounts/{accountId}/credits/{creditId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'creditId'}}`, encodeURIComponent(String(body.creditId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.creditId;
  return Axios<UpdateCreditsResponse>(
    {
      url,
      method: 'PUT',
      data: body.UpdateCreditsSpec
    },
    customAxiosInstance
  );
};

export const useUpdateCreditsForAccountMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<UpdateCreditsResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<UpdateCreditsResponse, Error, UpdateCreditsForAccountForQuery, unknown>((props) => {
    return  updateCreditsForAccountMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Updates global rate card
 * Updates global rate card
 */


export const updateGlobalRateCardMutate = (
  body: UpdateGlobalRateCardForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/billing/global_rate_card';
  return Axios<GlobalRateCardResponse>(
    {
      url,
      method: 'PUT',
      data: body.GlobalRateCardSpec
    },
    customAxiosInstance
  );
};

export const useUpdateGlobalRateCardMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<GlobalRateCardResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<GlobalRateCardResponse, Error, UpdateGlobalRateCardForQuery, unknown>((props) => {
    return  updateGlobalRateCardMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Update payment method for a billing account to OTHER/EMPLOYEE
 * API to update billing method to OTHER/EMPLOYEE
 */


export const updatePaymentMethodMutate = (
  body: UpdatePaymentMethodForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/billing/accounts/{accountId}/payment_method'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<UpdatePaymentMethodResponse>(
    {
      url,
      method: 'PUT',
      data: body.UpdatePaymentMethodSpec
    },
    customAxiosInstance
  );
};

export const useUpdatePaymentMethodMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<UpdatePaymentMethodResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<UpdatePaymentMethodResponse, Error, UpdatePaymentMethodForQuery, unknown>((props) => {
    return  updatePaymentMethodMutate(props, customAxiosInstance);
  }, mutationOptions);
};





