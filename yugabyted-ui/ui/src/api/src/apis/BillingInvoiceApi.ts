// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  BillingInvoiceSummaryResponse,
  InvoiceListResponse,
  UsageSummaryResponse,
  UsageSummaryStatisticsResponse,
} from '../models';

export interface GetBillingInvoiceSummaryForQuery {
  accountId: string;
}
export interface GetBillingInvoiceSummaryByInvoiceIdForQuery {
  accountId: string;
  invoiceId: string;
}
export interface GetUsageSummaryForQuery {
  accountId: string;
  invoiceId: string;
}
export interface GetUsageSummaryStatisticsForQuery {
  accountId: string;
  invoiceId: string;
}
export interface ListInvoicesForQuery {
  accountId: string;
  limit?: number;
  continuation_token?: string;
}

/**
 * Billing invoice summary
 * Billing invoice summary
 */

export const getBillingInvoiceSummaryAxiosRequest = (
  requestParameters: GetBillingInvoiceSummaryForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<BillingInvoiceSummaryResponse>(
    {
      url: '/public/billing-invoice/accounts/{accountId}/summary'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getBillingInvoiceSummaryQueryKey = (
  requestParametersQuery: GetBillingInvoiceSummaryForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/billing-invoice/accounts/{accountId}/summary`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetBillingInvoiceSummaryInfiniteQuery = <T = BillingInvoiceSummaryResponse, Error = ApiError>(
  params: GetBillingInvoiceSummaryForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<BillingInvoiceSummaryResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getBillingInvoiceSummaryQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<BillingInvoiceSummaryResponse, Error, T>(
    queryKey,
    () => getBillingInvoiceSummaryAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetBillingInvoiceSummaryQuery = <T = BillingInvoiceSummaryResponse, Error = ApiError>(
  params: GetBillingInvoiceSummaryForQuery,
  options?: {
    query?: UseQueryOptions<BillingInvoiceSummaryResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getBillingInvoiceSummaryQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<BillingInvoiceSummaryResponse, Error, T>(
    queryKey,
    () => getBillingInvoiceSummaryAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Billing invoice summary  by invoice id
 * Billing invoice summary by invoice id
 */

export const getBillingInvoiceSummaryByInvoiceIdAxiosRequest = (
  requestParameters: GetBillingInvoiceSummaryByInvoiceIdForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<BillingInvoiceSummaryResponse>(
    {
      url: '/public/billing-invoice/accounts/{accountId}/invoices/{invoiceId}/summary'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'invoiceId'}}`, encodeURIComponent(String(requestParameters.invoiceId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getBillingInvoiceSummaryByInvoiceIdQueryKey = (
  requestParametersQuery: GetBillingInvoiceSummaryByInvoiceIdForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/billing-invoice/accounts/{accountId}/invoices/{invoiceId}/summary`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetBillingInvoiceSummaryByInvoiceIdInfiniteQuery = <T = BillingInvoiceSummaryResponse, Error = ApiError>(
  params: GetBillingInvoiceSummaryByInvoiceIdForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<BillingInvoiceSummaryResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getBillingInvoiceSummaryByInvoiceIdQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<BillingInvoiceSummaryResponse, Error, T>(
    queryKey,
    () => getBillingInvoiceSummaryByInvoiceIdAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetBillingInvoiceSummaryByInvoiceIdQuery = <T = BillingInvoiceSummaryResponse, Error = ApiError>(
  params: GetBillingInvoiceSummaryByInvoiceIdForQuery,
  options?: {
    query?: UseQueryOptions<BillingInvoiceSummaryResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getBillingInvoiceSummaryByInvoiceIdQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<BillingInvoiceSummaryResponse, Error, T>(
    queryKey,
    () => getBillingInvoiceSummaryByInvoiceIdAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get account\'s summary usage
 * Get account\'s summary usage
 */

export const getUsageSummaryAxiosRequest = (
  requestParameters: GetUsageSummaryForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<UsageSummaryResponse>(
    {
      url: '/public/billing-invoice/accounts/{accountId}/invoices/{invoiceId}/usage_summary'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'invoiceId'}}`, encodeURIComponent(String(requestParameters.invoiceId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getUsageSummaryQueryKey = (
  requestParametersQuery: GetUsageSummaryForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/billing-invoice/accounts/{accountId}/invoices/{invoiceId}/usage_summary`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetUsageSummaryInfiniteQuery = <T = UsageSummaryResponse, Error = ApiError>(
  params: GetUsageSummaryForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<UsageSummaryResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getUsageSummaryQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<UsageSummaryResponse, Error, T>(
    queryKey,
    () => getUsageSummaryAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetUsageSummaryQuery = <T = UsageSummaryResponse, Error = ApiError>(
  params: GetUsageSummaryForQuery,
  options?: {
    query?: UseQueryOptions<UsageSummaryResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getUsageSummaryQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<UsageSummaryResponse, Error, T>(
    queryKey,
    () => getUsageSummaryAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get account\'s summary usage statistics
 * Get account\'s summary usage statistics
 */

export const getUsageSummaryStatisticsAxiosRequest = (
  requestParameters: GetUsageSummaryStatisticsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<UsageSummaryStatisticsResponse>(
    {
      url: '/public/billing-invoice/accounts/{accountId}/invoices/{invoiceId}/usage_summary_statistics'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'invoiceId'}}`, encodeURIComponent(String(requestParameters.invoiceId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getUsageSummaryStatisticsQueryKey = (
  requestParametersQuery: GetUsageSummaryStatisticsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/billing-invoice/accounts/{accountId}/invoices/{invoiceId}/usage_summary_statistics`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetUsageSummaryStatisticsInfiniteQuery = <T = UsageSummaryStatisticsResponse, Error = ApiError>(
  params: GetUsageSummaryStatisticsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<UsageSummaryStatisticsResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getUsageSummaryStatisticsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<UsageSummaryStatisticsResponse, Error, T>(
    queryKey,
    () => getUsageSummaryStatisticsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetUsageSummaryStatisticsQuery = <T = UsageSummaryStatisticsResponse, Error = ApiError>(
  params: GetUsageSummaryStatisticsForQuery,
  options?: {
    query?: UseQueryOptions<UsageSummaryStatisticsResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getUsageSummaryStatisticsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<UsageSummaryStatisticsResponse, Error, T>(
    queryKey,
    () => getUsageSummaryStatisticsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get list of invoices for an account
 * Get list of invoices for an account
 */

export const listInvoicesAxiosRequest = (
  requestParameters: ListInvoicesForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<InvoiceListResponse>(
    {
      url: '/public/billing/accounts/{accountId}/invoices'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
      }
    },
    customAxiosInstance
  );
};

export const listInvoicesQueryKey = (
  requestParametersQuery: ListInvoicesForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/billing/accounts/{accountId}/invoices`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListInvoicesInfiniteQuery = <T = InvoiceListResponse, Error = ApiError>(
  params: ListInvoicesForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<InvoiceListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listInvoicesQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<InvoiceListResponse, Error, T>(
    queryKey,
    () => listInvoicesAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListInvoicesQuery = <T = InvoiceListResponse, Error = ApiError>(
  params: ListInvoicesForQuery,
  options?: {
    query?: UseQueryOptions<InvoiceListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listInvoicesQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<InvoiceListResponse, Error, T>(
    queryKey,
    () => listInvoicesAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






