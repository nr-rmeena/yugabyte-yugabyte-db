// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  LoggingLevelResponseSchema,
} from '../models';

export interface GetLoggingLevelForQuery {
  logger_type?: string;
}
export interface SetLoggingLevelForQuery {
  logging_level: SetLoggingLevelLoggingLevelEnum;
  logger_type?: string;
}

/**
 * Get Logging Level
 * Get Logging Level
 */

export const getLoggingLevelAxiosRequest = (
  requestParameters: GetLoggingLevelForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<LoggingLevelResponseSchema>(
    {
      url: '/private/logger',
      method: 'GET',
      params: {
        logger_type: requestParameters['logger_type'],
      }
    },
    customAxiosInstance
  );
};

export const getLoggingLevelQueryKey = (
  requestParametersQuery: GetLoggingLevelForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/logger`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetLoggingLevelInfiniteQuery = <T = LoggingLevelResponseSchema, Error = ApiError>(
  params: GetLoggingLevelForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<LoggingLevelResponseSchema, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getLoggingLevelQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<LoggingLevelResponseSchema, Error, T>(
    queryKey,
    () => getLoggingLevelAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetLoggingLevelQuery = <T = LoggingLevelResponseSchema, Error = ApiError>(
  params: GetLoggingLevelForQuery,
  options?: {
    query?: UseQueryOptions<LoggingLevelResponseSchema, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getLoggingLevelQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<LoggingLevelResponseSchema, Error, T>(
    queryKey,
    () => getLoggingLevelAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Set Logging Level
 * Set Logging Level
 */


export const setLoggingLevelMutate = (
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/logger';
  return Axios<LoggingLevelResponseSchema>(
    {
      url,
      method: 'PUT',
    },
    customAxiosInstance
  );
};

export const useSetLoggingLevelMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<LoggingLevelResponseSchema, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<LoggingLevelResponseSchema, Error, void, unknown>(() => {
    return  setLoggingLevelMutate(customAxiosInstance);
  }, mutationOptions);
};






/**
  * @export
  * @enum {string}
  */
export enum SetLoggingLevelLoggingLevelEnum {
  Off = 'OFF',
  Error = 'ERROR',
  Warn = 'WARN',
  Info = 'INFO',
  Debug = 'DEBUG',
  Trace = 'TRACE',
  All = 'ALL'
}
