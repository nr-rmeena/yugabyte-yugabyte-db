// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  AuditEventCategoriesResponse,
  AuditEventResponse,
  ListAuditEventResponse,
} from '../models';

export interface GetAuditEventByIdForQuery {
  accountId: string;
  auditEventId: string;
}
export interface GetAuditEventCategoriesForQuery {
  accountId: string;
}
export interface ListAuditEventsForQuery {
  accountId: string;
  search?: string;
  event_type?: string;
  resource_type?: string;
  start_timestamp?: string;
  end_timestamp?: string;
  limit?: number;
  continuation_token?: string;
  order?: string;
  order_by?: string;
}

/**
 * Get detailed information about a specific audit log event
 * Get detailed information about a specific audit log event
 */

export const getAuditEventByIdAxiosRequest = (
  requestParameters: GetAuditEventByIdForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<AuditEventResponse>(
    {
      url: '/public/accounts/{accountId}/audit/events/{auditEventId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'auditEventId'}}`, encodeURIComponent(String(requestParameters.auditEventId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getAuditEventByIdQueryKey = (
  requestParametersQuery: GetAuditEventByIdForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/audit/events/{auditEventId}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetAuditEventByIdInfiniteQuery = <T = AuditEventResponse, Error = ApiError>(
  params: GetAuditEventByIdForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<AuditEventResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getAuditEventByIdQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<AuditEventResponse, Error, T>(
    queryKey,
    () => getAuditEventByIdAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetAuditEventByIdQuery = <T = AuditEventResponse, Error = ApiError>(
  params: GetAuditEventByIdForQuery,
  options?: {
    query?: UseQueryOptions<AuditEventResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getAuditEventByIdQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<AuditEventResponse, Error, T>(
    queryKey,
    () => getAuditEventByIdAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get audit event categories
 * Get audit event categories
 */

export const getAuditEventCategoriesAxiosRequest = (
  requestParameters: GetAuditEventCategoriesForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<AuditEventCategoriesResponse>(
    {
      url: '/public/accounts/{accountId}/audit/categories'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getAuditEventCategoriesQueryKey = (
  requestParametersQuery: GetAuditEventCategoriesForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/audit/categories`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetAuditEventCategoriesInfiniteQuery = <T = AuditEventCategoriesResponse, Error = ApiError>(
  params: GetAuditEventCategoriesForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<AuditEventCategoriesResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getAuditEventCategoriesQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<AuditEventCategoriesResponse, Error, T>(
    queryKey,
    () => getAuditEventCategoriesAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetAuditEventCategoriesQuery = <T = AuditEventCategoriesResponse, Error = ApiError>(
  params: GetAuditEventCategoriesForQuery,
  options?: {
    query?: UseQueryOptions<AuditEventCategoriesResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getAuditEventCategoriesQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<AuditEventCategoriesResponse, Error, T>(
    queryKey,
    () => getAuditEventCategoriesAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get list of audit events for a given account
 * Get list of audit events for a given account
 */

export const listAuditEventsAxiosRequest = (
  requestParameters: ListAuditEventsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<ListAuditEventResponse>(
    {
      url: '/public/accounts/{accountId}/audit/events'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
        search: requestParameters['search'],
        event_type: requestParameters['event_type'],
        resource_type: requestParameters['resource_type'],
        start_timestamp: requestParameters['start_timestamp'],
        end_timestamp: requestParameters['end_timestamp'],
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
        order: requestParameters['order'],
        order_by: requestParameters['order_by'],
      }
    },
    customAxiosInstance
  );
};

export const listAuditEventsQueryKey = (
  requestParametersQuery: ListAuditEventsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/audit/events`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListAuditEventsInfiniteQuery = <T = ListAuditEventResponse, Error = ApiError>(
  params: ListAuditEventsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<ListAuditEventResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listAuditEventsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<ListAuditEventResponse, Error, T>(
    queryKey,
    () => listAuditEventsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListAuditEventsQuery = <T = ListAuditEventResponse, Error = ApiError>(
  params: ListAuditEventsForQuery,
  options?: {
    query?: UseQueryOptions<ListAuditEventResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listAuditEventsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<ListAuditEventResponse, Error, T>(
    queryKey,
    () => listAuditEventsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






