// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  RuntimeConfigResponse,
  RuntimeConfigUpdateRequest,
  RuntimeConfigUpdateResponse,
} from '../models';

export interface GetRuntimeConfigForQuery {
  scopeType: GetRuntimeConfigScopeTypeEnum;
  scopeId?: string;
}
export interface UpdateRuntimeConfigForQuery {
  scopeType: UpdateRuntimeConfigScopeTypeEnum;
  scopeId?: string;
  RuntimeConfigUpdateRequest?: RuntimeConfigUpdateRequest;
}

/**
 * Get runtime configuration
 * Get runtime configuration
 */

export const getRuntimeConfigAxiosRequest = (
  requestParameters: GetRuntimeConfigForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<RuntimeConfigResponse>(
    {
      url: '/private/runtime_config',
      method: 'GET',
      params: {
        scopeId: requestParameters['scopeId'],
        scopeType: requestParameters['scopeType'],
      }
    },
    customAxiosInstance
  );
};

export const getRuntimeConfigQueryKey = (
  requestParametersQuery: GetRuntimeConfigForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/runtime_config`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetRuntimeConfigInfiniteQuery = <T = RuntimeConfigResponse, Error = ApiError>(
  params: GetRuntimeConfigForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<RuntimeConfigResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getRuntimeConfigQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<RuntimeConfigResponse, Error, T>(
    queryKey,
    () => getRuntimeConfigAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetRuntimeConfigQuery = <T = RuntimeConfigResponse, Error = ApiError>(
  params: GetRuntimeConfigForQuery,
  options?: {
    query?: UseQueryOptions<RuntimeConfigResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getRuntimeConfigQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<RuntimeConfigResponse, Error, T>(
    queryKey,
    () => getRuntimeConfigAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Update or delete configuration keys for given scope.
 * Update configuration keys for given scope.
 */


export const updateRuntimeConfigMutate = (
  body: UpdateRuntimeConfigForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/runtime_config';
  return Axios<RuntimeConfigUpdateResponse>(
    {
      url,
      method: 'PUT',
      data: body.RuntimeConfigUpdateRequest
    },
    customAxiosInstance
  );
};

export const useUpdateRuntimeConfigMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<RuntimeConfigUpdateResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<RuntimeConfigUpdateResponse, Error, UpdateRuntimeConfigForQuery, unknown>((props) => {
    return  updateRuntimeConfigMutate(props, customAxiosInstance);
  }, mutationOptions);
};






/**
  * @export
  * @enum {string}
  */
export enum GetRuntimeConfigScopeTypeEnum {
  Global = 'GLOBAL',
  Account = 'ACCOUNT'
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateRuntimeConfigScopeTypeEnum {
  Global = 'GLOBAL',
  Account = 'ACCOUNT'
}
