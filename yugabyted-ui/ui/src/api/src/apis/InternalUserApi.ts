// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  InviteUserSpec,
  UserListResponse,
} from '../models';

export interface ActivateInvitedUserWithoutTokenForQuery {
  InviteUserSpec: InviteUserSpec;
}
export interface ActivateSignupUserWithoutTokenForQuery {
  email: string;
}
export interface CleanupUserForQuery {
  userId: string;
}
export interface ListAllUsersForQuery {
  account_id?: string;
  email?: string;
  first_name?: string;
  last_name?: string;
  state?: string;
  order?: string;
  order_by?: string;
  limit?: number;
  continuation_token?: string;
  email_prefix?: string;
}

/**
 * Activate invited user
 * Activate invited user by skipping token validation
 */


export const activateInvitedUserWithoutTokenMutate = (
  body: ActivateInvitedUserWithoutTokenForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/users/activate_invited';
  return Axios<unknown>(
    {
      url,
      method: 'POST',
      data: body.InviteUserSpec
    },
    customAxiosInstance
  );
};

export const useActivateInvitedUserWithoutTokenMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, ActivateInvitedUserWithoutTokenForQuery, unknown>((props) => {
    return  activateInvitedUserWithoutTokenMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Activate signup user
 * Activate signup user by skipping token validation
 */


export const activateSignupUserWithoutTokenMutate = (
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/users/activate';
  return Axios<unknown>(
    {
      url,
      method: 'POST',
    },
    customAxiosInstance
  );
};

export const useActivateSignupUserWithoutTokenMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, void, unknown>(() => {
    return  activateSignupUserWithoutTokenMutate(customAxiosInstance);
  }, mutationOptions);
};


/**
 * Cleanup User
 * Delete user and remove the accounts/projects of which they are the sole admin
 */


export const cleanupUserMutate = (
  body: CleanupUserForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/users/{userId}/cleanup'.replace(`{${'userId'}}`, encodeURIComponent(String(body.userId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.userId;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useCleanupUserMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, CleanupUserForQuery, unknown>((props) => {
    return  cleanupUserMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * List users
 * List all users
 */

export const listAllUsersAxiosRequest = (
  requestParameters: ListAllUsersForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<UserListResponse>(
    {
      url: '/private/users',
      method: 'GET',
      params: {
        account_id: requestParameters['account_id'],
        email: requestParameters['email'],
        first_name: requestParameters['first_name'],
        last_name: requestParameters['last_name'],
        state: requestParameters['state'],
        order: requestParameters['order'],
        order_by: requestParameters['order_by'],
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
        email_prefix: requestParameters['email_prefix'],
      }
    },
    customAxiosInstance
  );
};

export const listAllUsersQueryKey = (
  requestParametersQuery: ListAllUsersForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/users`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListAllUsersInfiniteQuery = <T = UserListResponse, Error = ApiError>(
  params: ListAllUsersForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<UserListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listAllUsersQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<UserListResponse, Error, T>(
    queryKey,
    () => listAllUsersAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListAllUsersQuery = <T = UserListResponse, Error = ApiError>(
  params: ListAllUsersForQuery,
  options?: {
    query?: UseQueryOptions<UserListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listAllUsersQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<UserListResponse, Error, T>(
    queryKey,
    () => listAllUsersAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






