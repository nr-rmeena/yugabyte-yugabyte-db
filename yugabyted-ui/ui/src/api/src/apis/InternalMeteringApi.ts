// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  MeteringResponse,
} from '../models';

export interface GetMeteringDataForQuery {
  accountId: string;
  start_timestamp: string;
  end_timestamp: string;
  cluster_ids?: Array<string>;
}

/**
 * Get metering data
 * Get metering data
 */

export const getMeteringDataAxiosRequest = (
  requestParameters: GetMeteringDataForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<MeteringResponse>(
    {
      url: '/private/metering/accounts/{accountId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
        start_timestamp: requestParameters['start_timestamp'],
        end_timestamp: requestParameters['end_timestamp'],
        cluster_ids: requestParameters['cluster_ids'],
      }
    },
    customAxiosInstance
  );
};

export const getMeteringDataQueryKey = (
  requestParametersQuery: GetMeteringDataForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/metering/accounts/{accountId}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetMeteringDataInfiniteQuery = <T = MeteringResponse, Error = ApiError>(
  params: GetMeteringDataForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<MeteringResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getMeteringDataQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<MeteringResponse, Error, T>(
    queryKey,
    () => getMeteringDataAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetMeteringDataQuery = <T = MeteringResponse, Error = ApiError>(
  params: GetMeteringDataForQuery,
  options?: {
    query?: UseQueryOptions<MeteringResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getMeteringDataQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<MeteringResponse, Error, T>(
    queryKey,
    () => getMeteringDataAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






