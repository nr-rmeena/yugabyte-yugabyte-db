// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  AccountQuotaResponse,
  AccountResponse,
  AccountSpec,
  AllowedLoginTypesResponse,
  ApiError,
  BatchInviteUserResponse,
  BatchInviteUserSpec,
  InviteUserResponse,
  InviteUserSpec,
  ModifyAllowedLoginTypesRequest,
  ModifyUserRoleRequest,
  UserListResponse,
  UserResponse,
} from '../models';

export interface BatchInviteAccountUserForQuery {
  accountId: string;
  BatchInviteUserSpec: BatchInviteUserSpec;
}
export interface CreateAccountForQuery {
  AccountSpec: AccountSpec;
}
export interface DeleteAccountForQuery {
  accountId: string;
}
export interface GetAccountForQuery {
  accountId: string;
}
export interface GetAccountByNameForQuery {
  name: string;
}
export interface GetAccountQuotasForQuery {
  accountId: string;
}
export interface GetAccountUserForQuery {
  accountId: string;
  userId: string;
}
export interface GetAllowedLoginTypesForQuery {
  accountId: string;
}
export interface InviteAccountUserForQuery {
  accountId: string;
  InviteUserSpec: InviteUserSpec;
}
export interface ListUsersForQuery {
  accountId: string;
  email?: string;
  first_name?: string;
  last_name?: string;
  state?: string;
  order?: string;
  order_by?: string;
  limit?: number;
  continuation_token?: string;
}
export interface ModifyAccountForQuery {
  accountId: string;
  AccountSpec: AccountSpec;
}
export interface ModifyAllowedLoginTypesForQuery {
  accountId: string;
  ModifyAllowedLoginTypesRequest: ModifyAllowedLoginTypesRequest;
}
export interface ModifyUserRoleForQuery {
  accountId: string;
  userId: string;
  ModifyUserRoleRequest: ModifyUserRoleRequest;
}
export interface RemoveAccountUserForQuery {
  accountId: string;
  userId: string;
}

/**
 * Batch invite users to signup for the account
 * Batch add or invite user to account
 */


export const batchInviteAccountUserMutate = (
  body: BatchInviteAccountUserForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/users/batch'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<BatchInviteUserResponse>(
    {
      url,
      method: 'POST',
      data: body.BatchInviteUserSpec
    },
    customAxiosInstance
  );
};

export const useBatchInviteAccountUserMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<BatchInviteUserResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<BatchInviteUserResponse, Error, BatchInviteAccountUserForQuery, unknown>((props) => {
    return  batchInviteAccountUserMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Create an account
 * Create an account
 */


export const createAccountMutate = (
  body: CreateAccountForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts';
  return Axios<AccountResponse>(
    {
      url,
      method: 'POST',
      data: body.AccountSpec
    },
    customAxiosInstance
  );
};

export const useCreateAccountMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<AccountResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<AccountResponse, Error, CreateAccountForQuery, unknown>((props) => {
    return  createAccountMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Delete an account
 * Delete account
 */


export const deleteAccountMutate = (
  body: DeleteAccountForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useDeleteAccountMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, DeleteAccountForQuery, unknown>((props) => {
    return  deleteAccountMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Get an account
 * Get account info
 */

export const getAccountAxiosRequest = (
  requestParameters: GetAccountForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<AccountResponse>(
    {
      url: '/public/accounts/{accountId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getAccountQueryKey = (
  requestParametersQuery: GetAccountForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetAccountInfiniteQuery = <T = AccountResponse, Error = ApiError>(
  params: GetAccountForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<AccountResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getAccountQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<AccountResponse, Error, T>(
    queryKey,
    () => getAccountAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetAccountQuery = <T = AccountResponse, Error = ApiError>(
  params: GetAccountForQuery,
  options?: {
    query?: UseQueryOptions<AccountResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getAccountQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<AccountResponse, Error, T>(
    queryKey,
    () => getAccountAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get account by name
 * Get account by name
 */

export const getAccountByNameAxiosRequest = (
  requestParameters: GetAccountByNameForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<AccountResponse>(
    {
      url: '/public/accounts',
      method: 'GET',
      params: {
        name: requestParameters['name'],
      }
    },
    customAxiosInstance
  );
};

export const getAccountByNameQueryKey = (
  requestParametersQuery: GetAccountByNameForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetAccountByNameInfiniteQuery = <T = AccountResponse, Error = ApiError>(
  params: GetAccountByNameForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<AccountResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getAccountByNameQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<AccountResponse, Error, T>(
    queryKey,
    () => getAccountByNameAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetAccountByNameQuery = <T = AccountResponse, Error = ApiError>(
  params: GetAccountByNameForQuery,
  options?: {
    query?: UseQueryOptions<AccountResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getAccountByNameQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<AccountResponse, Error, T>(
    queryKey,
    () => getAccountByNameAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get account quotas
 * Get account quotas
 */

export const getAccountQuotasAxiosRequest = (
  requestParameters: GetAccountQuotasForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<AccountQuotaResponse>(
    {
      url: '/public/accounts/{accountId}/quotas'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getAccountQuotasQueryKey = (
  requestParametersQuery: GetAccountQuotasForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/quotas`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetAccountQuotasInfiniteQuery = <T = AccountQuotaResponse, Error = ApiError>(
  params: GetAccountQuotasForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<AccountQuotaResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getAccountQuotasQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<AccountQuotaResponse, Error, T>(
    queryKey,
    () => getAccountQuotasAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetAccountQuotasQuery = <T = AccountQuotaResponse, Error = ApiError>(
  params: GetAccountQuotasForQuery,
  options?: {
    query?: UseQueryOptions<AccountQuotaResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getAccountQuotasQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<AccountQuotaResponse, Error, T>(
    queryKey,
    () => getAccountQuotasAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get a user
 * Get user info
 */

export const getAccountUserAxiosRequest = (
  requestParameters: GetAccountUserForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<UserResponse>(
    {
      url: '/public/accounts/{accountId}/users/{userId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'userId'}}`, encodeURIComponent(String(requestParameters.userId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getAccountUserQueryKey = (
  requestParametersQuery: GetAccountUserForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/users/{userId}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetAccountUserInfiniteQuery = <T = UserResponse, Error = ApiError>(
  params: GetAccountUserForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<UserResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getAccountUserQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<UserResponse, Error, T>(
    queryKey,
    () => getAccountUserAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetAccountUserQuery = <T = UserResponse, Error = ApiError>(
  params: GetAccountUserForQuery,
  options?: {
    query?: UseQueryOptions<UserResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getAccountUserQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<UserResponse, Error, T>(
    queryKey,
    () => getAccountUserAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get allowed login types for account
 * Get allowed login types for account
 */

export const getAllowedLoginTypesAxiosRequest = (
  requestParameters: GetAllowedLoginTypesForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<AllowedLoginTypesResponse>(
    {
      url: '/public/accounts/{accountId}/allowed_login_types'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getAllowedLoginTypesQueryKey = (
  requestParametersQuery: GetAllowedLoginTypesForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/allowed_login_types`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetAllowedLoginTypesInfiniteQuery = <T = AllowedLoginTypesResponse, Error = ApiError>(
  params: GetAllowedLoginTypesForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<AllowedLoginTypesResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getAllowedLoginTypesQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<AllowedLoginTypesResponse, Error, T>(
    queryKey,
    () => getAllowedLoginTypesAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetAllowedLoginTypesQuery = <T = AllowedLoginTypesResponse, Error = ApiError>(
  params: GetAllowedLoginTypesForQuery,
  options?: {
    query?: UseQueryOptions<AllowedLoginTypesResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getAllowedLoginTypesQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<AllowedLoginTypesResponse, Error, T>(
    queryKey,
    () => getAllowedLoginTypesAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Invite user to signup for the account
 * Add or Invite user to account
 */


export const inviteAccountUserMutate = (
  body: InviteAccountUserForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/users'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<InviteUserResponse>(
    {
      url,
      method: 'POST',
      data: body.InviteUserSpec
    },
    customAxiosInstance
  );
};

export const useInviteAccountUserMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<InviteUserResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<InviteUserResponse, Error, InviteAccountUserForQuery, unknown>((props) => {
    return  inviteAccountUserMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * List users
 * List users
 */

export const listUsersAxiosRequest = (
  requestParameters: ListUsersForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<UserListResponse>(
    {
      url: '/public/accounts/{accountId}/users'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
        email: requestParameters['email'],
        first_name: requestParameters['first_name'],
        last_name: requestParameters['last_name'],
        state: requestParameters['state'],
        order: requestParameters['order'],
        order_by: requestParameters['order_by'],
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
      }
    },
    customAxiosInstance
  );
};

export const listUsersQueryKey = (
  requestParametersQuery: ListUsersForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/users`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListUsersInfiniteQuery = <T = UserListResponse, Error = ApiError>(
  params: ListUsersForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<UserListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listUsersQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<UserListResponse, Error, T>(
    queryKey,
    () => listUsersAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListUsersQuery = <T = UserListResponse, Error = ApiError>(
  params: ListUsersForQuery,
  options?: {
    query?: UseQueryOptions<UserListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listUsersQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<UserListResponse, Error, T>(
    queryKey,
    () => listUsersAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Modify account
 * Modify account
 */


export const modifyAccountMutate = (
  body: ModifyAccountForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<AccountResponse>(
    {
      url,
      method: 'PUT',
      data: body.AccountSpec
    },
    customAxiosInstance
  );
};

export const useModifyAccountMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<AccountResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<AccountResponse, Error, ModifyAccountForQuery, unknown>((props) => {
    return  modifyAccountMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Modify allowed login types for account
 * Modify allowed login types for account
 */


export const modifyAllowedLoginTypesMutate = (
  body: ModifyAllowedLoginTypesForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/allowed_login_types'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<unknown>(
    {
      url,
      method: 'PUT',
      data: body.ModifyAllowedLoginTypesRequest
    },
    customAxiosInstance
  );
};

export const useModifyAllowedLoginTypesMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, ModifyAllowedLoginTypesForQuery, unknown>((props) => {
    return  modifyAllowedLoginTypesMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Modify user role
 * Modify user role
 */


export const modifyUserRoleMutate = (
  body: ModifyUserRoleForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/users/{userId}/roles'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'userId'}}`, encodeURIComponent(String(body.userId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.userId;
  return Axios<unknown>(
    {
      url,
      method: 'PUT',
      data: body.ModifyUserRoleRequest
    },
    customAxiosInstance
  );
};

export const useModifyUserRoleMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, ModifyUserRoleForQuery, unknown>((props) => {
    return  modifyUserRoleMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Remove user from account
 * Remove user from account
 */


export const removeAccountUserMutate = (
  body: RemoveAccountUserForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/users/{userId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'userId'}}`, encodeURIComponent(String(body.userId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.userId;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useRemoveAccountUserMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, RemoveAccountUserForQuery, unknown>((props) => {
    return  removeAccountUserMutate(props, customAxiosInstance);
  }, mutationOptions);
};





