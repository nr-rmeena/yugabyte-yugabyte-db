// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  ReadReplicaListResponse,
  ReadReplicaResponse,
  ReadReplicaSpec,
} from '../models';

export interface CreateReadReplicaForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
  ReadReplicaSpec?: ReadReplicaSpec;
}
export interface GetReadReplicaForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
  readReplicaId: string;
}
export interface ListReadReplicasForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
  region?: string;
}

/**
 * Create Read Replica
 * Create Read Replica
 */


export const createReadReplicaMutate = (
  body: CreateReadReplicaForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/read_replicas'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(body.clusterId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.clusterId;
  return Axios<ReadReplicaResponse>(
    {
      url,
      method: 'POST',
      data: body.ReadReplicaSpec
    },
    customAxiosInstance
  );
};

export const useCreateReadReplicaMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<ReadReplicaResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<ReadReplicaResponse, Error, CreateReadReplicaForQuery, unknown>((props) => {
    return  createReadReplicaMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Get Read Replica
 * Get Read Replicas
 */

export const getReadReplicaAxiosRequest = (
  requestParameters: GetReadReplicaForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<ReadReplicaResponse>(
    {
      url: '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/read_replica/{readReplicaId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(requestParameters.clusterId))).replace(`{${'readReplicaId'}}`, encodeURIComponent(String(requestParameters.readReplicaId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getReadReplicaQueryKey = (
  requestParametersQuery: GetReadReplicaForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/read_replica/{readReplicaId}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetReadReplicaInfiniteQuery = <T = ReadReplicaResponse, Error = ApiError>(
  params: GetReadReplicaForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<ReadReplicaResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getReadReplicaQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<ReadReplicaResponse, Error, T>(
    queryKey,
    () => getReadReplicaAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetReadReplicaQuery = <T = ReadReplicaResponse, Error = ApiError>(
  params: GetReadReplicaForQuery,
  options?: {
    query?: UseQueryOptions<ReadReplicaResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getReadReplicaQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<ReadReplicaResponse, Error, T>(
    queryKey,
    () => getReadReplicaAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * List Read Replicas
 * List Read Replicas
 */

export const listReadReplicasAxiosRequest = (
  requestParameters: ListReadReplicasForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<ReadReplicaListResponse>(
    {
      url: '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/read_replicas'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(requestParameters.clusterId))),
      method: 'GET',
      params: {
        region: requestParameters['region'],
      }
    },
    customAxiosInstance
  );
};

export const listReadReplicasQueryKey = (
  requestParametersQuery: ListReadReplicasForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/read_replicas`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListReadReplicasInfiniteQuery = <T = ReadReplicaListResponse, Error = ApiError>(
  params: ListReadReplicasForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<ReadReplicaListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listReadReplicasQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<ReadReplicaListResponse, Error, T>(
    queryKey,
    () => listReadReplicasAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListReadReplicasQuery = <T = ReadReplicaListResponse, Error = ApiError>(
  params: ListReadReplicasForQuery,
  options?: {
    query?: UseQueryOptions<ReadReplicaListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listReadReplicasQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<ReadReplicaListResponse, Error, T>(
    queryKey,
    () => listReadReplicasAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






