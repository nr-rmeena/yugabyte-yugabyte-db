// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  AddNetworkRequest,
  ApiError,
  InternalNetworkAllowListListResponse,
  InternalNetworkAllowListResponse,
  InternalSingleTenantVpcRequest,
  InternalVPCPeeringResponse,
  InternalVpcPeeringSpec,
  NetworkAllowListSpec,
  NetworkListResponse,
  NetworkResponse,
  SingleTenantVpcResponse,
} from '../models';

export interface AddNetworkForQuery {
  AddNetworkRequest?: AddNetworkRequest;
}
export interface CreateInternalNetworkAllowListForQuery {
  accountId: string;
  projectId: string;
  NetworkAllowListSpec?: NetworkAllowListSpec;
}
export interface CreateInternalVpcPeeringForQuery {
  accountId: string;
  projectId: string;
  vpcId: string;
  InternalVpcPeeringSpec?: InternalVpcPeeringSpec;
}
export interface CreateSingleTenantVpcMetadataForQuery {
  accountId: string;
  projectId: string;
  InternalSingleTenantVpcRequest?: InternalSingleTenantVpcRequest;
}
export interface DeleteExternalOrInternalNetworkAllowListForQuery {
  accountId: string;
  projectId: string;
  allowListId: string;
}
export interface DeleteInternalVpcPeeringForQuery {
  accountId: string;
  projectId: string;
  peeringId: string;
}
export interface GetExternalOrInternalNetworkAllowListForQuery {
  accountId: string;
  projectId: string;
  allowListId: string;
}
export interface GetVpcForQuery {
  vpcId: string;
}
export interface ListAllNetworkAllowListsForQuery {
  accountId: string;
  projectId: string;
}
export interface ListNetworksForQuery {
  cloud_provider_project?: string;
  cloud?: string;
  region?: string;
  under_maintenance?: boolean;
  order?: string;
  order_by?: string;
  limit?: number;
  continuation_token?: string;
}
export interface MarkVpcsForMaintenanceForQuery {
  vpcIds: Set<string>;
  maintenance_status: boolean;
}

/**
 * Add new cluster network
 * Add new cluster network
 */


export const addNetworkMutate = (
  body: AddNetworkForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/network';
  return Axios<NetworkResponse>(
    {
      url,
      method: 'POST',
      data: body.AddNetworkRequest
    },
    customAxiosInstance
  );
};

export const useAddNetworkMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<NetworkResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<NetworkResponse, Error, AddNetworkForQuery, unknown>((props) => {
    return  addNetworkMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Create a private allow list
 * Create a private allow list entity
 */


export const createInternalNetworkAllowListMutate = (
  body: CreateInternalNetworkAllowListForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/accounts/{accountId}/projects/{projectId}/network/allow_lists'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  return Axios<InternalNetworkAllowListResponse>(
    {
      url,
      method: 'POST',
      data: body.NetworkAllowListSpec
    },
    customAxiosInstance
  );
};

export const useCreateInternalNetworkAllowListMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<InternalNetworkAllowListResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<InternalNetworkAllowListResponse, Error, CreateInternalNetworkAllowListForQuery, unknown>((props) => {
    return  createInternalNetworkAllowListMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Peer two yugabyte VPC
 * Peer two yugabyte VPC
 */


export const createInternalVpcPeeringMutate = (
  body: CreateInternalVpcPeeringForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/accounts/{accountId}/projects/{projectId}/network/vpcs/{vpcId}/peer'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId))).replace(`{${'vpcId'}}`, encodeURIComponent(String(body.vpcId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.vpcId;
  return Axios<InternalVPCPeeringResponse>(
    {
      url,
      method: 'POST',
      data: body.InternalVpcPeeringSpec
    },
    customAxiosInstance
  );
};

export const useCreateInternalVpcPeeringMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<InternalVPCPeeringResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<InternalVPCPeeringResponse, Error, CreateInternalVpcPeeringForQuery, unknown>((props) => {
    return  createInternalVpcPeeringMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Add customer VPC metadata
 * Create customer-facing VPC metadata for cluster isolation
 */


export const createSingleTenantVpcMetadataMutate = (
  body: CreateSingleTenantVpcMetadataForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/accounts/{accountId}/projects/{projectId}/network/vpcs'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  return Axios<SingleTenantVpcResponse>(
    {
      url,
      method: 'POST',
      data: body.InternalSingleTenantVpcRequest
    },
    customAxiosInstance
  );
};

export const useCreateSingleTenantVpcMetadataMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<SingleTenantVpcResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<SingleTenantVpcResponse, Error, CreateSingleTenantVpcMetadataForQuery, unknown>((props) => {
    return  createSingleTenantVpcMetadataMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Delete an allow list
 * Delete an allow list entity
 */


export const deleteExternalOrInternalNetworkAllowListMutate = (
  body: DeleteExternalOrInternalNetworkAllowListForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/accounts/{accountId}/projects/{projectId}/network/allow_lists/{allowListId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId))).replace(`{${'allowListId'}}`, encodeURIComponent(String(body.allowListId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.allowListId;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useDeleteExternalOrInternalNetworkAllowListMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, DeleteExternalOrInternalNetworkAllowListForQuery, unknown>((props) => {
    return  deleteExternalOrInternalNetworkAllowListMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Delete internal VPC peering between two yugabyte VPC
 * Delete internal VPC peering between two yugabyte VPC
 */


export const deleteInternalVpcPeeringMutate = (
  body: DeleteInternalVpcPeeringForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/accounts/{accountId}/projects/{projectId}/network/vpcs/{peeringId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId))).replace(`{${'peeringId'}}`, encodeURIComponent(String(body.peeringId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.peeringId;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useDeleteInternalVpcPeeringMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, DeleteInternalVpcPeeringForQuery, unknown>((props) => {
    return  deleteInternalVpcPeeringMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Retrieve an allow list
 * Retrieve an allow list entity
 */

export const getExternalOrInternalNetworkAllowListAxiosRequest = (
  requestParameters: GetExternalOrInternalNetworkAllowListForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<InternalNetworkAllowListResponse>(
    {
      url: '/private/accounts/{accountId}/projects/{projectId}/network/allow_lists/{allowListId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${'allowListId'}}`, encodeURIComponent(String(requestParameters.allowListId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getExternalOrInternalNetworkAllowListQueryKey = (
  requestParametersQuery: GetExternalOrInternalNetworkAllowListForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/accounts/{accountId}/projects/{projectId}/network/allow_lists/{allowListId}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetExternalOrInternalNetworkAllowListInfiniteQuery = <T = InternalNetworkAllowListResponse, Error = ApiError>(
  params: GetExternalOrInternalNetworkAllowListForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<InternalNetworkAllowListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getExternalOrInternalNetworkAllowListQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<InternalNetworkAllowListResponse, Error, T>(
    queryKey,
    () => getExternalOrInternalNetworkAllowListAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetExternalOrInternalNetworkAllowListQuery = <T = InternalNetworkAllowListResponse, Error = ApiError>(
  params: GetExternalOrInternalNetworkAllowListForQuery,
  options?: {
    query?: UseQueryOptions<InternalNetworkAllowListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getExternalOrInternalNetworkAllowListQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<InternalNetworkAllowListResponse, Error, T>(
    queryKey,
    () => getExternalOrInternalNetworkAllowListAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get network info by ID
 * Get network info by ID
 */

export const getVpcAxiosRequest = (
  requestParameters: GetVpcForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<NetworkResponse>(
    {
      url: '/private/network/{vpcId}'.replace(`{${'vpcId'}}`, encodeURIComponent(String(requestParameters.vpcId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getVpcQueryKey = (
  requestParametersQuery: GetVpcForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/network/{vpcId}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetVpcInfiniteQuery = <T = NetworkResponse, Error = ApiError>(
  params: GetVpcForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<NetworkResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getVpcQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<NetworkResponse, Error, T>(
    queryKey,
    () => getVpcAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetVpcQuery = <T = NetworkResponse, Error = ApiError>(
  params: GetVpcForQuery,
  options?: {
    query?: UseQueryOptions<NetworkResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getVpcQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<NetworkResponse, Error, T>(
    queryKey,
    () => getVpcAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get list of internal + external allow lists
 * Get list of allow list entities
 */

export const listAllNetworkAllowListsAxiosRequest = (
  requestParameters: ListAllNetworkAllowListsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<InternalNetworkAllowListListResponse>(
    {
      url: '/private/accounts/{accountId}/projects/{projectId}/network/allow_lists'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(requestParameters.projectId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const listAllNetworkAllowListsQueryKey = (
  requestParametersQuery: ListAllNetworkAllowListsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/accounts/{accountId}/projects/{projectId}/network/allow_lists`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListAllNetworkAllowListsInfiniteQuery = <T = InternalNetworkAllowListListResponse, Error = ApiError>(
  params: ListAllNetworkAllowListsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<InternalNetworkAllowListListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listAllNetworkAllowListsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<InternalNetworkAllowListListResponse, Error, T>(
    queryKey,
    () => listAllNetworkAllowListsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListAllNetworkAllowListsQuery = <T = InternalNetworkAllowListListResponse, Error = ApiError>(
  params: ListAllNetworkAllowListsForQuery,
  options?: {
    query?: UseQueryOptions<InternalNetworkAllowListListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listAllNetworkAllowListsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<InternalNetworkAllowListListResponse, Error, T>(
    queryKey,
    () => listAllNetworkAllowListsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * List all networks
 * List all cluster networks
 */

export const listNetworksAxiosRequest = (
  requestParameters: ListNetworksForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<NetworkListResponse>(
    {
      url: '/private/network',
      method: 'GET',
      params: {
        cloud_provider_project: requestParameters['cloud_provider_project'],
        cloud: requestParameters['cloud'],
        region: requestParameters['region'],
        under_maintenance: requestParameters['under_maintenance'],
        order: requestParameters['order'],
        order_by: requestParameters['order_by'],
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
      }
    },
    customAxiosInstance
  );
};

export const listNetworksQueryKey = (
  requestParametersQuery: ListNetworksForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/network`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListNetworksInfiniteQuery = <T = NetworkListResponse, Error = ApiError>(
  params: ListNetworksForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<NetworkListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listNetworksQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<NetworkListResponse, Error, T>(
    queryKey,
    () => listNetworksAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListNetworksQuery = <T = NetworkListResponse, Error = ApiError>(
  params: ListNetworksForQuery,
  options?: {
    query?: UseQueryOptions<NetworkListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listNetworksQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<NetworkListResponse, Error, T>(
    queryKey,
    () => listNetworksAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Mark VPCs as under maintenance
 * Mark VPCs for Maintenance
 */


export const markVpcsForMaintenanceMutate = (
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/network/maintenance';
  return Axios<unknown>(
    {
      url,
      method: 'POST',
    },
    customAxiosInstance
  );
};

export const useMarkVpcsForMaintenanceMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, void, unknown>(() => {
    return  markVpcsForMaintenanceMutate(customAxiosInstance);
  }, mutationOptions);
};





