// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  HealthCheckResponse,
} from '../models';


/**
 * Check if application is alive
 * A simple ping healthcheck endpoint
 */

export const getPingAxiosRequest = (
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<HealthCheckResponse>(
    {
      url: '/public/ping',
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getPingQueryKey = (
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/ping`,
  pageParam,
];


export const useGetPingInfiniteQuery = <T = HealthCheckResponse, Error = ApiError>(
  options?: {
    query?: UseInfiniteQueryOptions<HealthCheckResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getPingQueryKey(pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<HealthCheckResponse, Error, T>(
    queryKey,
    () => getPingAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetPingQuery = <T = HealthCheckResponse, Error = ApiError>(
  options?: {
    query?: UseQueryOptions<HealthCheckResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getPingQueryKey(version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<HealthCheckResponse, Error, T>(
    queryKey,
    () => getPingAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






