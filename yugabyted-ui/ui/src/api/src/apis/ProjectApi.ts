// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  CreateProjectRequest,
  ProjectListResponse,
  ProjectResponse,
} from '../models';

export interface CreateProjectForQuery {
  accountId: string;
  CreateProjectRequest: CreateProjectRequest;
}
export interface DeleteProjectForQuery {
  accountId: string;
  projectId: string;
}
export interface GetProjectForQuery {
  accountId: string;
  projectId: string;
}
export interface ListProjectsForQuery {
  accountId: string;
  name?: string;
  order?: string;
  order_by?: string;
  limit?: number;
  continuation_token?: string;
}

/**
 * Create a project
 * Create a project
 */


export const createProjectMutate = (
  body: CreateProjectForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/projects'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<ProjectResponse>(
    {
      url,
      method: 'POST',
      data: body.CreateProjectRequest
    },
    customAxiosInstance
  );
};

export const useCreateProjectMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<ProjectResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<ProjectResponse, Error, CreateProjectForQuery, unknown>((props) => {
    return  createProjectMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Delete a project
 * Delete project
 */


export const deleteProjectMutate = (
  body: DeleteProjectForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/projects/{projectId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useDeleteProjectMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, DeleteProjectForQuery, unknown>((props) => {
    return  deleteProjectMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Get a project
 * Get project info
 */

export const getProjectAxiosRequest = (
  requestParameters: GetProjectForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<ProjectResponse>(
    {
      url: '/public/accounts/{accountId}/projects/{projectId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(requestParameters.projectId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getProjectQueryKey = (
  requestParametersQuery: GetProjectForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/projects/{projectId}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetProjectInfiniteQuery = <T = ProjectResponse, Error = ApiError>(
  params: GetProjectForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<ProjectResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getProjectQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<ProjectResponse, Error, T>(
    queryKey,
    () => getProjectAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetProjectQuery = <T = ProjectResponse, Error = ApiError>(
  params: GetProjectForQuery,
  options?: {
    query?: UseQueryOptions<ProjectResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getProjectQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<ProjectResponse, Error, T>(
    queryKey,
    () => getProjectAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * List projects
 * List projects
 */

export const listProjectsAxiosRequest = (
  requestParameters: ListProjectsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<ProjectListResponse>(
    {
      url: '/public/accounts/{accountId}/projects'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
        name: requestParameters['name'],
        order: requestParameters['order'],
        order_by: requestParameters['order_by'],
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
      }
    },
    customAxiosInstance
  );
};

export const listProjectsQueryKey = (
  requestParametersQuery: ListProjectsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/projects`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListProjectsInfiniteQuery = <T = ProjectListResponse, Error = ApiError>(
  params: ListProjectsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<ProjectListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listProjectsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<ProjectListResponse, Error, T>(
    queryKey,
    () => listProjectsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListProjectsQuery = <T = ProjectListResponse, Error = ApiError>(
  params: ListProjectsForQuery,
  options?: {
    query?: UseQueryOptions<ProjectListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listProjectsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<ProjectListResponse, Error, T>(
    queryKey,
    () => listProjectsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






