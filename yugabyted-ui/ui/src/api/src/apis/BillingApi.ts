// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  BillingProfileResponse,
  BillingProfileSpec,
  CreditListResponse,
  EstimateClusterCostResponse,
  EstimateClusterCostSpec,
  GetDefaultPaymentMethodResponse,
  PaymentMethodListResponse,
  PaymentMethodResponse,
  PaymentMethodSpec,
  RateInfoResponse,
  SetupIntentResponse,
} from '../models';

export interface AttachPaymentMethodForQuery {
  accountId: string;
  PaymentMethodSpec?: PaymentMethodSpec;
}
export interface CreateBillingProfileForQuery {
  accountId: string;
  BillingProfileSpec?: BillingProfileSpec;
}
export interface CreateSetupIntentForQuery {
  accountId: string;
}
export interface DeletePaymentMethodForQuery {
  accountId: string;
  paymentMethodId: string;
}
export interface EstimateClusterCostForQuery {
  accountId: string;
  EstimateClusterCostSpec?: EstimateClusterCostSpec;
}
export interface GetBillingProfileForQuery {
  accountId: string;
}
export interface GetDefaultPaymentMethodForQuery {
  accountId: string;
}
export interface GetRateInfoForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
}
export interface ListCreditsForQuery {
  accountId: string;
  limit?: number;
  continuation_token?: string;
}
export interface ListPaymentMethodsForQuery {
  accountId: string;
}
export interface ModifyBillingProfileForQuery {
  accountId: string;
  BillingProfileSpec?: BillingProfileSpec;
}
export interface SetDefaultPaymentMethodForQuery {
  accountId: string;
  paymentMethodId: string;
}

/**
 * Attaches payment method to the stripe customer
 * Attaches payment method to the stripe customer
 */


export const attachPaymentMethodMutate = (
  body: AttachPaymentMethodForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/billing/accounts/{accountId}/payment_methods/attach'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<PaymentMethodResponse>(
    {
      url,
      method: 'POST',
      data: body.PaymentMethodSpec
    },
    customAxiosInstance
  );
};

export const useAttachPaymentMethodMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<PaymentMethodResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<PaymentMethodResponse, Error, AttachPaymentMethodForQuery, unknown>((props) => {
    return  attachPaymentMethodMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * This API adds billing profile
 * This API adds billing profile
 */


export const createBillingProfileMutate = (
  body: CreateBillingProfileForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/billing/accounts/{accountId}/billing_profile'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<BillingProfileResponse>(
    {
      url,
      method: 'POST',
      data: body.BillingProfileSpec
    },
    customAxiosInstance
  );
};

export const useCreateBillingProfileMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<BillingProfileResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<BillingProfileResponse, Error, CreateBillingProfileForQuery, unknown>((props) => {
    return  createBillingProfileMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Create set up intent object
 * Create set up intent object
 */


export const createSetupIntentMutate = (
  body: CreateSetupIntentForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/billing/accounts/{accountId}/set_up_intent/create'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<SetupIntentResponse>(
    {
      url,
      method: 'POST',
    },
    customAxiosInstance
  );
};

export const useCreateSetupIntentMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<SetupIntentResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<SetupIntentResponse, Error, CreateSetupIntentForQuery, unknown>((props) => {
    return  createSetupIntentMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * This API deletes payment method
 * This API deletes payment method
 */


export const deletePaymentMethodMutate = (
  body: DeletePaymentMethodForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/billing/accounts/{accountId}/payment_methods/{paymentMethodId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'paymentMethodId'}}`, encodeURIComponent(String(body.paymentMethodId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.paymentMethodId;
  return Axios<PaymentMethodResponse>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useDeletePaymentMethodMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<PaymentMethodResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<PaymentMethodResponse, Error, DeletePaymentMethodForQuery, unknown>((props) => {
    return  deletePaymentMethodMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * This API to calculate the estimated cost of the cluster
 * This API to calculate the estimated cost of the cluster
 */


export const estimateClusterCostMutate = (
  body: EstimateClusterCostForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/billing/accounts/{accountId}/estimate'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<EstimateClusterCostResponse>(
    {
      url,
      method: 'POST',
      data: body.EstimateClusterCostSpec
    },
    customAxiosInstance
  );
};

export const useEstimateClusterCostMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<EstimateClusterCostResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<EstimateClusterCostResponse, Error, EstimateClusterCostForQuery, unknown>((props) => {
    return  estimateClusterCostMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * This API gets billing profile
 * This API gets billing profile
 */

export const getBillingProfileAxiosRequest = (
  requestParameters: GetBillingProfileForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<BillingProfileResponse>(
    {
      url: '/public/billing/accounts/{accountId}/billing_profile'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getBillingProfileQueryKey = (
  requestParametersQuery: GetBillingProfileForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/billing/accounts/{accountId}/billing_profile`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetBillingProfileInfiniteQuery = <T = BillingProfileResponse, Error = ApiError>(
  params: GetBillingProfileForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<BillingProfileResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getBillingProfileQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<BillingProfileResponse, Error, T>(
    queryKey,
    () => getBillingProfileAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetBillingProfileQuery = <T = BillingProfileResponse, Error = ApiError>(
  params: GetBillingProfileForQuery,
  options?: {
    query?: UseQueryOptions<BillingProfileResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getBillingProfileQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<BillingProfileResponse, Error, T>(
    queryKey,
    () => getBillingProfileAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get default payment method
 * Get default payment method
 */

export const getDefaultPaymentMethodAxiosRequest = (
  requestParameters: GetDefaultPaymentMethodForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<GetDefaultPaymentMethodResponse>(
    {
      url: '/public/billing/accounts/{accountId}/default_payment_method'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getDefaultPaymentMethodQueryKey = (
  requestParametersQuery: GetDefaultPaymentMethodForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/billing/accounts/{accountId}/default_payment_method`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetDefaultPaymentMethodInfiniteQuery = <T = GetDefaultPaymentMethodResponse, Error = ApiError>(
  params: GetDefaultPaymentMethodForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<GetDefaultPaymentMethodResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getDefaultPaymentMethodQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<GetDefaultPaymentMethodResponse, Error, T>(
    queryKey,
    () => getDefaultPaymentMethodAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetDefaultPaymentMethodQuery = <T = GetDefaultPaymentMethodResponse, Error = ApiError>(
  params: GetDefaultPaymentMethodForQuery,
  options?: {
    query?: UseQueryOptions<GetDefaultPaymentMethodResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getDefaultPaymentMethodQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<GetDefaultPaymentMethodResponse, Error, T>(
    queryKey,
    () => getDefaultPaymentMethodAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get rate info of an account
 * Get rate info of an account
 */

export const getRateInfoAxiosRequest = (
  requestParameters: GetRateInfoForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<RateInfoResponse>(
    {
      url: '/public/billing/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/rate_info'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(requestParameters.clusterId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getRateInfoQueryKey = (
  requestParametersQuery: GetRateInfoForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/billing/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/rate_info`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetRateInfoInfiniteQuery = <T = RateInfoResponse, Error = ApiError>(
  params: GetRateInfoForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<RateInfoResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getRateInfoQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<RateInfoResponse, Error, T>(
    queryKey,
    () => getRateInfoAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetRateInfoQuery = <T = RateInfoResponse, Error = ApiError>(
  params: GetRateInfoForQuery,
  options?: {
    query?: UseQueryOptions<RateInfoResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getRateInfoQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<RateInfoResponse, Error, T>(
    queryKey,
    () => getRateInfoAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get list of credits for an account
 * Get list of credits for an account
 */

export const listCreditsAxiosRequest = (
  requestParameters: ListCreditsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<CreditListResponse>(
    {
      url: '/public/billing/accounts/{accountId}/credits'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
      }
    },
    customAxiosInstance
  );
};

export const listCreditsQueryKey = (
  requestParametersQuery: ListCreditsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/billing/accounts/{accountId}/credits`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListCreditsInfiniteQuery = <T = CreditListResponse, Error = ApiError>(
  params: ListCreditsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<CreditListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listCreditsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<CreditListResponse, Error, T>(
    queryKey,
    () => listCreditsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListCreditsQuery = <T = CreditListResponse, Error = ApiError>(
  params: ListCreditsForQuery,
  options?: {
    query?: UseQueryOptions<CreditListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listCreditsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<CreditListResponse, Error, T>(
    queryKey,
    () => listCreditsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Lists billing payment methods
 * Lists billing payment methods
 */

export const listPaymentMethodsAxiosRequest = (
  requestParameters: ListPaymentMethodsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<PaymentMethodListResponse>(
    {
      url: '/public/billing/accounts/{accountId}/payment_methods'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const listPaymentMethodsQueryKey = (
  requestParametersQuery: ListPaymentMethodsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/billing/accounts/{accountId}/payment_methods`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListPaymentMethodsInfiniteQuery = <T = PaymentMethodListResponse, Error = ApiError>(
  params: ListPaymentMethodsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<PaymentMethodListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listPaymentMethodsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<PaymentMethodListResponse, Error, T>(
    queryKey,
    () => listPaymentMethodsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListPaymentMethodsQuery = <T = PaymentMethodListResponse, Error = ApiError>(
  params: ListPaymentMethodsForQuery,
  options?: {
    query?: UseQueryOptions<PaymentMethodListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listPaymentMethodsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<PaymentMethodListResponse, Error, T>(
    queryKey,
    () => listPaymentMethodsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * This API updates billing profile
 * This API updates billing profile
 */


export const modifyBillingProfileMutate = (
  body: ModifyBillingProfileForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/billing/accounts/{accountId}/billing_profile'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  return Axios<BillingProfileResponse>(
    {
      url,
      method: 'PUT',
      data: body.BillingProfileSpec
    },
    customAxiosInstance
  );
};

export const useModifyBillingProfileMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<BillingProfileResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<BillingProfileResponse, Error, ModifyBillingProfileForQuery, unknown>((props) => {
    return  modifyBillingProfileMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * This API sets default payment method
 * This API sets default payment method
 */


export const setDefaultPaymentMethodMutate = (
  body: SetDefaultPaymentMethodForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/billing/accounts/{accountId}/payment_methods/{paymentMethodId}/default_payment_method'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'paymentMethodId'}}`, encodeURIComponent(String(body.paymentMethodId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.paymentMethodId;
  return Axios<PaymentMethodResponse>(
    {
      url,
      method: 'POST',
    },
    customAxiosInstance
  );
};

export const useSetDefaultPaymentMethodMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<PaymentMethodResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<PaymentMethodResponse, Error, SetDefaultPaymentMethodForQuery, unknown>((props) => {
    return  setDefaultPaymentMethodMutate(props, customAxiosInstance);
  }, mutationOptions);
};





