// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  AccountListResponse,
  ApiError,
} from '../models';

export interface ListAccountsForQuery {
  name?: string;
  order?: string;
  order_by?: string;
  limit?: number;
  continuation_token?: string;
  track_id?: string;
}

/**
 * List accounts
 * List accounts
 */

export const listAccountsAxiosRequest = (
  requestParameters: ListAccountsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<AccountListResponse>(
    {
      url: '/private/account',
      method: 'GET',
      params: {
        name: requestParameters['name'],
        order: requestParameters['order'],
        order_by: requestParameters['order_by'],
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
        track_id: requestParameters['track_id'],
      }
    },
    customAxiosInstance
  );
};

export const listAccountsQueryKey = (
  requestParametersQuery: ListAccountsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/account`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListAccountsInfiniteQuery = <T = AccountListResponse, Error = ApiError>(
  params: ListAccountsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<AccountListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listAccountsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<AccountListResponse, Error, T>(
    queryKey,
    () => listAccountsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListAccountsQuery = <T = AccountListResponse, Error = ApiError>(
  params: ListAccountsForQuery,
  options?: {
    query?: UseQueryOptions<AccountListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listAccountsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<AccountListResponse, Error, T>(
    queryKey,
    () => listAccountsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






