// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  CertificateResponse,
  ClusterTierSpecsResponse,
  InstanceTypeSpecMapResponse,
  RegionListResponse,
} from '../models';

export interface GetInstanceTypesForQuery {
  accountId: string;
  cloud: GetInstanceTypesCloudEnum;
  tier?: GetInstanceTypesTierEnum;
  region?: string;
  show_disabled?: boolean;
}
export interface GetRegionsForQuery {
  cloud: string;
}

/**
 * Get the CA certificate to use for connection to the cluster
 * Get certificate for connection to the cluster
 */

export const getCACertAxiosRequest = (
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<CertificateResponse>(
    {
      url: '/public/certificate',
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getCACertQueryKey = (
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/certificate`,
  pageParam,
];


export const useGetCACertInfiniteQuery = <T = CertificateResponse, Error = ApiError>(
  options?: {
    query?: UseInfiniteQueryOptions<CertificateResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getCACertQueryKey(pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<CertificateResponse, Error, T>(
    queryKey,
    () => getCACertAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetCACertQuery = <T = CertificateResponse, Error = ApiError>(
  options?: {
    query?: UseQueryOptions<CertificateResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getCACertQueryKey(version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<CertificateResponse, Error, T>(
    queryKey,
    () => getCACertAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get the cost, number of cores, disk size, transactions, connections, and memory specs associated with paid and free tier clusters.
 * Get base prices and specs of free and paid tier clusters
 */

export const getClusterTierSpecsAxiosRequest = (
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<ClusterTierSpecsResponse>(
    {
      url: '/public/clusters/tier_spec',
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getClusterTierSpecsQueryKey = (
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/clusters/tier_spec`,
  pageParam,
];


export const useGetClusterTierSpecsInfiniteQuery = <T = ClusterTierSpecsResponse, Error = ApiError>(
  options?: {
    query?: UseInfiniteQueryOptions<ClusterTierSpecsResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getClusterTierSpecsQueryKey(pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<ClusterTierSpecsResponse, Error, T>(
    queryKey,
    () => getClusterTierSpecsAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetClusterTierSpecsQuery = <T = ClusterTierSpecsResponse, Error = ApiError>(
  options?: {
    query?: UseQueryOptions<ClusterTierSpecsResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getClusterTierSpecsQueryKey(version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<ClusterTierSpecsResponse, Error, T>(
    queryKey,
    () => getClusterTierSpecsAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get the list of supported instance types for a given region/zone and provider
 * Get the list of supported instance types for a given region/zone and provider
 */

export const getInstanceTypesAxiosRequest = (
  requestParameters: GetInstanceTypesForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<InstanceTypeSpecMapResponse>(
    {
      url: '/public/{accountId}/instance_types/{cloud}'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'cloud'}}`, encodeURIComponent(String(requestParameters.cloud))),
      method: 'GET',
      params: {
        tier: requestParameters['tier'],
        region: requestParameters['region'],
        show_disabled: requestParameters['show_disabled'],
      }
    },
    customAxiosInstance
  );
};

export const getInstanceTypesQueryKey = (
  requestParametersQuery: GetInstanceTypesForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/{accountId}/instance_types/{cloud}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetInstanceTypesInfiniteQuery = <T = InstanceTypeSpecMapResponse, Error = ApiError>(
  params: GetInstanceTypesForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<InstanceTypeSpecMapResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getInstanceTypesQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<InstanceTypeSpecMapResponse, Error, T>(
    queryKey,
    () => getInstanceTypesAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetInstanceTypesQuery = <T = InstanceTypeSpecMapResponse, Error = ApiError>(
  params: GetInstanceTypesForQuery,
  options?: {
    query?: UseQueryOptions<InstanceTypeSpecMapResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getInstanceTypesQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<InstanceTypeSpecMapResponse, Error, T>(
    queryKey,
    () => getInstanceTypesAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Get list of available regions to deploy a cluster in
 * Retrieve list of regions available to deploy cluster by cloud
 */

export const getRegionsAxiosRequest = (
  requestParameters: GetRegionsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<RegionListResponse>(
    {
      url: '/public/regions/{cloud}'.replace(`{${'cloud'}}`, encodeURIComponent(String(requestParameters.cloud))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getRegionsQueryKey = (
  requestParametersQuery: GetRegionsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/regions/{cloud}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetRegionsInfiniteQuery = <T = RegionListResponse, Error = ApiError>(
  params: GetRegionsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<RegionListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getRegionsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<RegionListResponse, Error, T>(
    queryKey,
    () => getRegionsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetRegionsQuery = <T = RegionListResponse, Error = ApiError>(
  params: GetRegionsForQuery,
  options?: {
    query?: UseQueryOptions<RegionListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getRegionsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<RegionListResponse, Error, T>(
    queryKey,
    () => getRegionsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};







/**
  * @export
  * @enum {string}
  */
export enum GetInstanceTypesCloudEnum {
  Aws = 'AWS',
  Gcp = 'GCP'
}
/**
  * @export
  * @enum {string}
  */
export enum GetInstanceTypesTierEnum {
  Free = 'FREE',
  Paid = 'PAID'
}
