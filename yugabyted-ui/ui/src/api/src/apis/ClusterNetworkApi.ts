// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  NetworkAllowListListResponse,
} from '../models';

export interface EditClusterNetworkAllowListsForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
  request_body?: string[];
}
export interface ListClusterNetworkAllowListsForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
}

/**
 * Modify set of allow lists associated to a cluster
 * Modify set of allow lists associated to a cluster
 */


export const editClusterNetworkAllowListsMutate = (
  body: EditClusterNetworkAllowListsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/network/allow_lists'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(body.clusterId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.clusterId;
  return Axios<NetworkAllowListListResponse>(
    {
      url,
      method: 'PUT',
      data: body.request_body
    },
    customAxiosInstance
  );
};

export const useEditClusterNetworkAllowListsMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<NetworkAllowListListResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<NetworkAllowListListResponse, Error, EditClusterNetworkAllowListsForQuery, unknown>((props) => {
    return  editClusterNetworkAllowListsMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Get list of allow lists associated to a cluster
 * Get list of allow list entities associated to a cluster
 */

export const listClusterNetworkAllowListsAxiosRequest = (
  requestParameters: ListClusterNetworkAllowListsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<NetworkAllowListListResponse>(
    {
      url: '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/network/allow_lists'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(requestParameters.clusterId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const listClusterNetworkAllowListsQueryKey = (
  requestParametersQuery: ListClusterNetworkAllowListsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/network/allow_lists`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListClusterNetworkAllowListsInfiniteQuery = <T = NetworkAllowListListResponse, Error = ApiError>(
  params: ListClusterNetworkAllowListsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<NetworkAllowListListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listClusterNetworkAllowListsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<NetworkAllowListListResponse, Error, T>(
    queryKey,
    () => listClusterNetworkAllowListsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListClusterNetworkAllowListsQuery = <T = NetworkAllowListListResponse, Error = ApiError>(
  params: ListClusterNetworkAllowListsForQuery,
  options?: {
    query?: UseQueryOptions<NetworkAllowListListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listClusterNetworkAllowListsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<NetworkAllowListListResponse, Error, T>(
    queryKey,
    () => listClusterNetworkAllowListsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






