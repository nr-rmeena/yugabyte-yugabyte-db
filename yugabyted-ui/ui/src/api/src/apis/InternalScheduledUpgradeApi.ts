// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  ClusterBasedUpgradeRequestSpec,
  ScheduledClusterUpgradeTaskResponse,
  ScheduledUpgradeTaskListResponse,
  ScheduledUpgradeTaskResponse,
  UpgradeRequestSpec,
} from '../models';

export interface CancelScheduledUpgradeForQuery {
  taskId: string;
}
export interface ListScheduledUpgradesForQuery {
  limit?: number;
  continuation_token?: string;
}
export interface RemoveClusterFromExecutionForQuery {
  taskId: string;
  clusterId: string;
}
export interface ScheduleBulkUpgradeForQuery {
  trackId: string;
  UpgradeRequestSpec?: UpgradeRequestSpec;
}
export interface ScheduleClusterUpgradeForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
  ClusterBasedUpgradeRequestSpec?: ClusterBasedUpgradeRequestSpec;
}

/**
 * Cancel Scheduled Upgrade
 * Cancel a scheduled upgrade task
 */


export const cancelScheduledUpgradeMutate = (
  body: CancelScheduledUpgradeForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/scheduled_upgrade/{taskId}'.replace(`{${'taskId'}}`, encodeURIComponent(String(body.taskId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.taskId;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useCancelScheduledUpgradeMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, CancelScheduledUpgradeForQuery, unknown>((props) => {
    return  cancelScheduledUpgradeMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * List Scheduled Upgrades
 * List currently scheduled upgrade tasks
 */

export const listScheduledUpgradesAxiosRequest = (
  requestParameters: ListScheduledUpgradesForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<ScheduledUpgradeTaskListResponse>(
    {
      url: '/private/scheduled_upgrade',
      method: 'GET',
      params: {
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
      }
    },
    customAxiosInstance
  );
};

export const listScheduledUpgradesQueryKey = (
  requestParametersQuery: ListScheduledUpgradesForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/scheduled_upgrade`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListScheduledUpgradesInfiniteQuery = <T = ScheduledUpgradeTaskListResponse, Error = ApiError>(
  params: ListScheduledUpgradesForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<ScheduledUpgradeTaskListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listScheduledUpgradesQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<ScheduledUpgradeTaskListResponse, Error, T>(
    queryKey,
    () => listScheduledUpgradesAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListScheduledUpgradesQuery = <T = ScheduledUpgradeTaskListResponse, Error = ApiError>(
  params: ListScheduledUpgradesForQuery,
  options?: {
    query?: UseQueryOptions<ScheduledUpgradeTaskListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listScheduledUpgradesQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<ScheduledUpgradeTaskListResponse, Error, T>(
    queryKey,
    () => listScheduledUpgradesAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Remove Cluster From Execution
 * Remove a cluster from a scheduled upgrade execution
 */


export const removeClusterFromExecutionMutate = (
  body: RemoveClusterFromExecutionForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/scheduled_upgrade/{taskId}/clusters/{clusterId}'.replace(`{${'taskId'}}`, encodeURIComponent(String(body.taskId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(body.clusterId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.taskId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.clusterId;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useRemoveClusterFromExecutionMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, RemoveClusterFromExecutionForQuery, unknown>((props) => {
    return  removeClusterFromExecutionMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Schedule a Bulk Upgrade
 * Schedule an upgrade based on cluster tier and optionally cloud/region
 */


export const scheduleBulkUpgradeMutate = (
  body: ScheduleBulkUpgradeForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/scheduled_upgrade/tracks/{trackId}'.replace(`{${'trackId'}}`, encodeURIComponent(String(body.trackId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.trackId;
  return Axios<ScheduledUpgradeTaskResponse>(
    {
      url,
      method: 'POST',
      data: body.UpgradeRequestSpec
    },
    customAxiosInstance
  );
};

export const useScheduleBulkUpgradeMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<ScheduledUpgradeTaskResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<ScheduledUpgradeTaskResponse, Error, ScheduleBulkUpgradeForQuery, unknown>((props) => {
    return  scheduleBulkUpgradeMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Schedule Cluster Upgrade
 * Schedule an Upgrade for the specified Cluster
 */


export const scheduleClusterUpgradeMutate = (
  body: ScheduleClusterUpgradeForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/scheduled_upgrade/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(body.clusterId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.clusterId;
  return Axios<ScheduledClusterUpgradeTaskResponse>(
    {
      url,
      method: 'POST',
      data: body.ClusterBasedUpgradeRequestSpec
    },
    customAxiosInstance
  );
};

export const useScheduleClusterUpgradeMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<ScheduledClusterUpgradeTaskResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<ScheduledClusterUpgradeTaskResponse, Error, ScheduleClusterUpgradeForQuery, unknown>((props) => {
    return  scheduleClusterUpgradeMutate(props, customAxiosInstance);
  }, mutationOptions);
};





