// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  MaintenanceScheduleResponse,
  MaintenanceScheduleSpec,
  MaintenanceWindowResponse,
  ScheduledMaintenanceEventListResponse,
  ScheduledUpgradeResponse,
} from '../models';

export interface DelayMaintenanceEventForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
  executionId: string;
}
export interface GetMaintenanceScheduleForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
}
export interface GetNextMaintenanceWindowInfoForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
  executionId: string;
}
export interface ListScheduledMaintenanceEventsForClusterForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
  limit?: number;
  continuation_token?: string;
}
export interface TriggerMaintenanceEventForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
  executionId: string;
}
export interface UpdateMaintenanceScheduleForQuery {
  accountId: string;
  projectId: string;
  clusterId: string;
  MaintenanceScheduleSpec?: MaintenanceScheduleSpec;
}

/**
 * API to delay maintenance events for a cluster
 * API to delay maintenance events for a cluster
 */


export const delayMaintenanceEventMutate = (
  body: DelayMaintenanceEventForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/maintenance/events/{executionId}/delay'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(body.clusterId))).replace(`{${'executionId'}}`, encodeURIComponent(String(body.executionId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.clusterId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.executionId;
  return Axios<ScheduledUpgradeResponse>(
    {
      url,
      method: 'POST',
    },
    customAxiosInstance
  );
};

export const useDelayMaintenanceEventMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<ScheduledUpgradeResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<ScheduledUpgradeResponse, Error, DelayMaintenanceEventForQuery, unknown>((props) => {
    return  delayMaintenanceEventMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * API to get maintenance schedules
 * API to get maintenance schedules
 */

export const getMaintenanceScheduleAxiosRequest = (
  requestParameters: GetMaintenanceScheduleForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<MaintenanceScheduleResponse>(
    {
      url: '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/maintenance/schedule'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(requestParameters.clusterId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getMaintenanceScheduleQueryKey = (
  requestParametersQuery: GetMaintenanceScheduleForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/maintenance/schedule`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetMaintenanceScheduleInfiniteQuery = <T = MaintenanceScheduleResponse, Error = ApiError>(
  params: GetMaintenanceScheduleForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<MaintenanceScheduleResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getMaintenanceScheduleQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<MaintenanceScheduleResponse, Error, T>(
    queryKey,
    () => getMaintenanceScheduleAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetMaintenanceScheduleQuery = <T = MaintenanceScheduleResponse, Error = ApiError>(
  params: GetMaintenanceScheduleForQuery,
  options?: {
    query?: UseQueryOptions<MaintenanceScheduleResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getMaintenanceScheduleQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<MaintenanceScheduleResponse, Error, T>(
    queryKey,
    () => getMaintenanceScheduleAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * API to next maintenance window for a cluster
 * API to get next maintenance window for a cluster
 */

export const getNextMaintenanceWindowInfoAxiosRequest = (
  requestParameters: GetNextMaintenanceWindowInfoForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<MaintenanceWindowResponse>(
    {
      url: '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/maintenance/{executionId}/next_available_window'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(requestParameters.clusterId))).replace(`{${'executionId'}}`, encodeURIComponent(String(requestParameters.executionId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getNextMaintenanceWindowInfoQueryKey = (
  requestParametersQuery: GetNextMaintenanceWindowInfoForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/maintenance/{executionId}/next_available_window`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetNextMaintenanceWindowInfoInfiniteQuery = <T = MaintenanceWindowResponse, Error = ApiError>(
  params: GetNextMaintenanceWindowInfoForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<MaintenanceWindowResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getNextMaintenanceWindowInfoQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<MaintenanceWindowResponse, Error, T>(
    queryKey,
    () => getNextMaintenanceWindowInfoAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetNextMaintenanceWindowInfoQuery = <T = MaintenanceWindowResponse, Error = ApiError>(
  params: GetNextMaintenanceWindowInfoForQuery,
  options?: {
    query?: UseQueryOptions<MaintenanceWindowResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getNextMaintenanceWindowInfoQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<MaintenanceWindowResponse, Error, T>(
    queryKey,
    () => getNextMaintenanceWindowInfoAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * API to list all scheduled maintenance events for a cluster
 * API to list all scheduled maintenance events for a cluster
 */

export const listScheduledMaintenanceEventsForClusterAxiosRequest = (
  requestParameters: ListScheduledMaintenanceEventsForClusterForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<ScheduledMaintenanceEventListResponse>(
    {
      url: '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/maintenance/events'.replace(`{${'accountId'}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(requestParameters.clusterId))),
      method: 'GET',
      params: {
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
      }
    },
    customAxiosInstance
  );
};

export const listScheduledMaintenanceEventsForClusterQueryKey = (
  requestParametersQuery: ListScheduledMaintenanceEventsForClusterForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/maintenance/events`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListScheduledMaintenanceEventsForClusterInfiniteQuery = <T = ScheduledMaintenanceEventListResponse, Error = ApiError>(
  params: ListScheduledMaintenanceEventsForClusterForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<ScheduledMaintenanceEventListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listScheduledMaintenanceEventsForClusterQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<ScheduledMaintenanceEventListResponse, Error, T>(
    queryKey,
    () => listScheduledMaintenanceEventsForClusterAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListScheduledMaintenanceEventsForClusterQuery = <T = ScheduledMaintenanceEventListResponse, Error = ApiError>(
  params: ListScheduledMaintenanceEventsForClusterForQuery,
  options?: {
    query?: UseQueryOptions<ScheduledMaintenanceEventListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listScheduledMaintenanceEventsForClusterQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<ScheduledMaintenanceEventListResponse, Error, T>(
    queryKey,
    () => listScheduledMaintenanceEventsForClusterAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * API to trigger maintenance events for a cluster
 * API to trigger maintenance events for a cluster
 */


export const triggerMaintenanceEventMutate = (
  body: TriggerMaintenanceEventForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/maintenance/events/{executionId}/trigger'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(body.clusterId))).replace(`{${'executionId'}}`, encodeURIComponent(String(body.executionId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.clusterId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.executionId;
  return Axios<unknown>(
    {
      url,
      method: 'POST',
    },
    customAxiosInstance
  );
};

export const useTriggerMaintenanceEventMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, TriggerMaintenanceEventForQuery, unknown>((props) => {
    return  triggerMaintenanceEventMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * API to update maintenance schedules
 * API to update maintenance schedules
 */


export const updateMaintenanceScheduleMutate = (
  body: UpdateMaintenanceScheduleForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/public/accounts/{accountId}/projects/{projectId}/clusters/{clusterId}/maintenance/schedule'.replace(`{${'accountId'}}`, encodeURIComponent(String(body.accountId))).replace(`{${'projectId'}}`, encodeURIComponent(String(body.projectId))).replace(`{${'clusterId'}}`, encodeURIComponent(String(body.clusterId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.accountId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.projectId;
  // eslint-disable-next-line
  // @ts-ignore
  delete body.clusterId;
  return Axios<MaintenanceScheduleResponse>(
    {
      url,
      method: 'PUT',
      data: body.MaintenanceScheduleSpec
    },
    customAxiosInstance
  );
};

export const useUpdateMaintenanceScheduleMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<MaintenanceScheduleResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<MaintenanceScheduleResponse, Error, UpdateMaintenanceScheduleForQuery, unknown>((props) => {
    return  updateMaintenanceScheduleMutate(props, customAxiosInstance);
  }, mutationOptions);
};





