// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  DefaultInternalTagsListResponse,
  GetAllowedValuesForInternalTagsResponse,
  GetUserInternalTagsResponse,
  InternalTagsSpec,
  UpdateDefaultInternalTagsRequest,
  UpdateDefaultInternalTagsResponse,
} from '../models';

export interface GetUserInternalTagsForQuery {
  userId: string;
}
export interface ListAllDefaultInternalTagsForQuery {
  email_prefix?: string;
  yb_dept?: string;
  yb_task?: string;
  order?: string;
  order_by?: string;
  limit?: number;
  continuation_token?: string;
}
export interface UpdateDefaultInternalTagsForQuery {
  UpdateDefaultInternalTagsRequest?: UpdateDefaultInternalTagsRequest;
}
export interface UpdateUserInternalTagsForQuery {
  userId: string;
  InternalTagsSpec?: InternalTagsSpec;
}

/**
 * API to fetch allowed values for internal tags
 * API to fetch allowed values for internal tags
 */

export const getAllowedValuesForInternalTagsAxiosRequest = (
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<GetAllowedValuesForInternalTagsResponse>(
    {
      url: '/private/internal_tags/allowed_values',
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getAllowedValuesForInternalTagsQueryKey = (
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/internal_tags/allowed_values`,
  pageParam,
];


export const useGetAllowedValuesForInternalTagsInfiniteQuery = <T = GetAllowedValuesForInternalTagsResponse, Error = ApiError>(
  options?: {
    query?: UseInfiniteQueryOptions<GetAllowedValuesForInternalTagsResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getAllowedValuesForInternalTagsQueryKey(pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<GetAllowedValuesForInternalTagsResponse, Error, T>(
    queryKey,
    () => getAllowedValuesForInternalTagsAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetAllowedValuesForInternalTagsQuery = <T = GetAllowedValuesForInternalTagsResponse, Error = ApiError>(
  options?: {
    query?: UseQueryOptions<GetAllowedValuesForInternalTagsResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getAllowedValuesForInternalTagsQueryKey(version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<GetAllowedValuesForInternalTagsResponse, Error, T>(
    queryKey,
    () => getAllowedValuesForInternalTagsAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * API to get user internal tags for a given user
 * API to get user internal tags for a given user
 */

export const getUserInternalTagsAxiosRequest = (
  requestParameters: GetUserInternalTagsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<GetUserInternalTagsResponse>(
    {
      url: '/private/users/{userId}/internal_tags'.replace(`{${'userId'}}`, encodeURIComponent(String(requestParameters.userId))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getUserInternalTagsQueryKey = (
  requestParametersQuery: GetUserInternalTagsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/users/{userId}/internal_tags`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetUserInternalTagsInfiniteQuery = <T = GetUserInternalTagsResponse, Error = ApiError>(
  params: GetUserInternalTagsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<GetUserInternalTagsResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getUserInternalTagsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<GetUserInternalTagsResponse, Error, T>(
    queryKey,
    () => getUserInternalTagsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetUserInternalTagsQuery = <T = GetUserInternalTagsResponse, Error = ApiError>(
  params: GetUserInternalTagsForQuery,
  options?: {
    query?: UseQueryOptions<GetUserInternalTagsResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getUserInternalTagsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<GetUserInternalTagsResponse, Error, T>(
    queryKey,
    () => getUserInternalTagsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * API to fetch all the default internal tags
 * API to fetch all the default internal tags
 */

export const listAllDefaultInternalTagsAxiosRequest = (
  requestParameters: ListAllDefaultInternalTagsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<DefaultInternalTagsListResponse>(
    {
      url: '/private/internal_tags/default',
      method: 'GET',
      params: {
        email_prefix: requestParameters['email_prefix'],
        yb_dept: requestParameters['yb_dept'],
        yb_task: requestParameters['yb_task'],
        order: requestParameters['order'],
        order_by: requestParameters['order_by'],
        limit: requestParameters['limit'],
        continuation_token: requestParameters['continuation_token'],
      }
    },
    customAxiosInstance
  );
};

export const listAllDefaultInternalTagsQueryKey = (
  requestParametersQuery: ListAllDefaultInternalTagsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/private/internal_tags/default`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useListAllDefaultInternalTagsInfiniteQuery = <T = DefaultInternalTagsListResponse, Error = ApiError>(
  params: ListAllDefaultInternalTagsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<DefaultInternalTagsListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = listAllDefaultInternalTagsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<DefaultInternalTagsListResponse, Error, T>(
    queryKey,
    () => listAllDefaultInternalTagsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useListAllDefaultInternalTagsQuery = <T = DefaultInternalTagsListResponse, Error = ApiError>(
  params: ListAllDefaultInternalTagsForQuery,
  options?: {
    query?: UseQueryOptions<DefaultInternalTagsListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = listAllDefaultInternalTagsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<DefaultInternalTagsListResponse, Error, T>(
    queryKey,
    () => listAllDefaultInternalTagsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * API to batch set/update default internal tags
 * API to batch set/update default internal tags
 */


export const updateDefaultInternalTagsMutate = (
  body: UpdateDefaultInternalTagsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/internal_tags/default';
  return Axios<UpdateDefaultInternalTagsResponse>(
    {
      url,
      method: 'POST',
      data: body.UpdateDefaultInternalTagsRequest
    },
    customAxiosInstance
  );
};

export const useUpdateDefaultInternalTagsMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<UpdateDefaultInternalTagsResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<UpdateDefaultInternalTagsResponse, Error, UpdateDefaultInternalTagsForQuery, unknown>((props) => {
    return  updateDefaultInternalTagsMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * API to set/update internal tags for a given user
 * API to set/update internal tags for a given user
 */


export const updateUserInternalTagsMutate = (
  body: UpdateUserInternalTagsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/private/users/{userId}/internal_tags'.replace(`{${'userId'}}`, encodeURIComponent(String(body.userId)));
  // eslint-disable-next-line
  // @ts-ignore
  delete body.userId;
  return Axios<unknown>(
    {
      url,
      method: 'POST',
      data: body.InternalTagsSpec
    },
    customAxiosInstance
  );
};

export const useUpdateUserInternalTagsMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, UpdateUserInternalTagsForQuery, unknown>((props) => {
    return  updateUserInternalTagsMutate(props, customAxiosInstance);
  }, mutationOptions);
};





