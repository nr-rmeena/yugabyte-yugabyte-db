// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  CidrListResponse,
} from '../models';

export interface GetRestrictedCidrsForQuery {
  cloud: string;
}

/**
 * Get list of unavailable CIDRs
 * Get list of unavailable CIDRs
 */

export const getRestrictedCidrsAxiosRequest = (
  requestParameters: GetRestrictedCidrsForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<CidrListResponse>(
    {
      url: '/public/networks/{cloud}/restricted'.replace(`{${'cloud'}}`, encodeURIComponent(String(requestParameters.cloud))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getRestrictedCidrsQueryKey = (
  requestParametersQuery: GetRestrictedCidrsForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/public/networks/{cloud}/restricted`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetRestrictedCidrsInfiniteQuery = <T = CidrListResponse, Error = ApiError>(
  params: GetRestrictedCidrsForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<CidrListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getRestrictedCidrsQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<CidrListResponse, Error, T>(
    queryKey,
    () => getRestrictedCidrsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetRestrictedCidrsQuery = <T = CidrListResponse, Error = ApiError>(
  params: GetRestrictedCidrsForQuery,
  options?: {
    query?: UseQueryOptions<CidrListResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getRestrictedCidrsQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<CidrListResponse, Error, T>(
    queryKey,
    () => getRestrictedCidrsAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






