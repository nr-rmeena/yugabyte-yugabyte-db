#!/usr/bin/env bash
#
# Copyright 2021 YugaByte, Inc. and Contributors
#
# Licensed under the Polyform Free Trial License 1.0.0 (the "License"); you
# may not use this file except in compliance with the License. You
# may obtain a copy of the License at
#
# https://github.com/YugaByte/yugabyte-db/blob/master/licenses/POLYFORM-FREE-TRIAL-LICENSE-1.0.0.txt

set -euo pipefail

print_help() {
  cat <<EOT
Usage: ${0##*/} [<options>]
Options:
  -o, --output <file/console>
    output type (default: file).
  -f, --file <filename>
    output file path - mandatory for 'file' output type
  -h, --help
    Show usage
EOT
}

output="console"
while [[ $# -gt 0 ]]; do
  case "$1" in
    -o|--output)
      if [[ "$2" =~ ^(file|console)$ ]]; then
        output=$2
      else
        echo "Invalid output: $1" >&2
        print_help
        exit 1
      fi
      shift
    ;;
    -f|--file)
      filename=$2
      shift
    ;;
    -h|--help)
      print_help
      exit 0
    ;;
    *)
      echo "Invalid option: $1" >&2
      print_help
      exit 1
  esac
  shift
done

YB_HOME_DIR=${YB_HOME_DIR:=/home/yugabyte}
YB_TSERVER_LOGS_DIR=${YB_HOME_DIR}/tserver/logs/

UNRECOGNIZED_STATUS_REGEX='server process \(PID \d+\) exited with unrecognized status .*'
TERMINATED_BY_SIGNAL_REGEX='server process \(PID \d+\) was terminated by signal .*'
TERMINATED_BY_EXCEPTION_REGEX='server process \(PID \d+\) was terminated by exception .*'
EXITED_WITH_CODE_REGEX='server process \(PID \d+\) exited with exit code .*'

PROCESS_MASTER="yb-master"
PROCESS_TSERVER="yb-tserver"

get_oom_kills_last_10_minutes()
{
  local oom_kills=$(journalctl -k --since "10min ago" | grep -c 'invoked oom-killer' | \
    sed 's/^ *//')
  echo "$oom_kills"
  return $?
}

get_boot_time()
{
  local process_name=$1
  local boot_time=$(ps --no-headers -C "$process_name" -o lstart=)
  [[ -z "$boot_time" ]] && { echo "Process $process_name not running" ; exit 1; }
  local boot_time_seconds=$(date +%s -d "$boot_time")
  echo "$boot_time_seconds"
  return $?
}

get_postmaster_pid()
{
  local tserver_pid=$(ps --no-headers -C yb-tserver -o pid=)
  [[ -z "$tserver_pid" ]] && { echo "yb-tserver not running" ; exit 1; }
  local postmaster_pid=$(ps --no-headers --ppid "$tserver_pid" -o pid= -o comm= | \
    grep postgres | tr -dc '0-9')
  echo "$postmaster_pid"
  return $?
}

get_postmaster_boot_time()
{
  local postmaster_pid=$(get_postmaster_pid)
  [[ -z "$postmaster_pid" ]] && { echo "postmaster not running" ; exit 1; }
  local boot_time=$(ps --no-headers --pid "$postmaster_pid" -o lstart=)
  [[ -z "$boot_time" ]] && { echo "postmaster not running" ; exit 1; }
  local boot_time_seconds=$(date +%s -d "$boot_time")
  echo "$boot_time_seconds"
  return $?
}

get_postgres_worker_count()
{
  local postmaster_pid=$(get_postmaster_pid)
  [[ -z "$postmaster_pid" ]] && { echo "postmaster not running" ; exit 1; }
  local postgres_worker_count=$(ps --no-headers --ppid "$postmaster_pid" -o pid= | wc -l)
  echo "$postgres_worker_count"
  return $?
}

cat_today_logs()
{
  local directory=$1
  local filename_prefix=$2
  [[ ! -d "$directory" ]] && { echo "$directory is not a directory" ; exit 1; }
  local today=$(date +"%Y-%m-%d")
  find "$directory" -regex ".*$filename_prefix$today.*" -print0 | sort -z | while read -d $'\0' file
  do
    if [ "$file" == "*.gz" ]; then
      zcat $file
    else
      cat $file
    fi
  done
  return $?
}

get_postgres_worker_terminated_count()
{
  local regex=$1
  local terminated_count=$(cat_today_logs "$YB_TSERVER_LOGS_DIR" "postgresql-" | \
    grep -cP "$regex")
  echo "$terminated_count"
  return $?
}

get_postmaster_rss()
{
  local postmaster_pid=$(get_postmaster_pid)
  [[ -z "$postmaster_pid" ]] && { echo "postmaster not running" ; exit 1; }
  local postmaster_rss=$(cat /proc/$postmaster_pid/statm | awk '{print $2}')
  echo "$postmaster_rss"
  return $?

}

get_postgres_workers_rss()
{
  local postmaster_pid=$(get_postmaster_pid)
  [[ -z "$postmaster_pid" ]] && { echo "postmaster not running" ; exit 1; }
  local postgres_workers_rss=$(ps --no-headers --ppid "$postmaster_pid" -o pid= | \
    xargs -I {} cat /proc/{}/statm | awk -F' ' '{sum += $2} END {print sum;} ')
  echo "$postgres_workers_rss"
  return $?
}

metrics=""
collect_metric()
{
  local metric_name=$1
  local metric_command=$2
  local command_result=$(eval "$metric_command")
  if [ $? -eq 0 ]; then
    if [[ $command_result =~ ^[+-]?[0-9]+\.?[0-9]*$ ]]; then
      metrics="$metrics$metric_name $command_result\\n"
    else
      echo "Command $metric_command resulted in $command_result, which is not a double value"
    fi
  else
    echo "Command $metric_command returned code $?: $command_result"
  fi
}

collect_metric 'yb_node_oom_kills_10min' 'get_oom_kills_last_10_minutes'
collect_metric 'yb_node_boot_time{process="master"}' "get_boot_time $PROCESS_MASTER"
collect_metric 'yb_node_boot_time{process="tserver"}' "get_boot_time $PROCESS_TSERVER"
collect_metric 'yb_node_boot_time{process="postmaster"}' 'get_postmaster_boot_time'
collect_metric 'yb_node_postgres_worker_count' 'get_postgres_worker_count'
collect_metric 'yb_node_postgres_worker_terminated_count{reason="unrecognized_status"}' \
 "get_postgres_worker_terminated_count \"$UNRECOGNIZED_STATUS_REGEX\""
collect_metric 'yb_node_postgres_worker_terminated_count{reason="terminated_by_signal"}' \
 "get_postgres_worker_terminated_count \"$TERMINATED_BY_SIGNAL_REGEX\""
collect_metric 'yb_node_postgres_worker_terminated_count{reason="terminated_by_exception"}' \
 "get_postgres_worker_terminated_count \"$TERMINATED_BY_EXCEPTION_REGEX\""
collect_metric 'yb_node_postgres_worker_terminated_count{reason="exited_with_code"}' \
 "get_postgres_worker_terminated_count \"$EXITED_WITH_CODE_REGEX\""
collect_metric 'yb_node_postgres_rss{process="postmaster"}' 'get_postmaster_rss'
collect_metric 'yb_node_postgres_rss{process="workers"}' 'get_postgres_workers_rss'

if [ "$output" = "file" ]; then
  mkdir -p "$(dirname "$filename")" && echo -e "$metrics" > "$filename"
else
  echo -e "$metrics"
fi
