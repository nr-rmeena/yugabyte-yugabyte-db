{
  "swagger" : "2.0",
  "info" : {
    "description" : "ALPHA - NOT FOR EXTERNAL USE",
    "version" : "v1",
    "title" : "Yugabyte Platform APIs",
    "termsOfService" : "TODO(chirag)",
    "contact" : {
      "name" : "https://docs.yugabyte.com"
    },
    "license" : {
      "name" : "Polyform Free Trial License 1.0.0",
      "url" : "https://github.com/yugabyte/yugabyte-db/blob/master/licenses/POLYFORM-FREE-TRIAL-LICENSE-1.0.0.txt"
    }
  },
  "host" : "localhost",
  "basePath" : "/",
  "tags" : [ {
    "name" : "Provider1"
  }, {
    "name" : "Customer Config"
  }, {
    "name" : "Region"
  }, {
    "name" : "Alert"
  }, {
    "name" : "Universe"
  }, {
    "name" : "UniverseInfo"
  }, {
    "name" : "AvailabilityZone"
  }, {
    "name" : "Universe Actions"
  }, {
    "name" : "Node Instances"
  }, {
    "name" : "Provider"
  }, {
    "name" : "Release"
  }, {
    "name" : "Encryption At Rest"
  }, {
    "name" : "Universe YB Database"
  }, {
    "name" : "Tables"
  }, {
    "name" : "RuntimeConfig"
  }, {
    "name" : "Tablet Server"
  } ],
  "schemes" : [ "http", "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/api/v1/customers/{cUUID}/providers1" : {
      "post" : {
        "tags" : [ "Provider1" ],
        "summary" : "createProvider",
        "description" : "",
        "operationId" : "create",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "CreateProviderRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Provider"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers" : {
      "get" : {
        "tags" : [ "Provider1" ],
        "summary" : "listProvider",
        "description" : "",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Provider"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Provider" ],
        "operationId" : "create",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/configs/{configUUID}" : {
      "put" : {
        "tags" : [ "Customer Config" ],
        "summary" : "List of customer configuration",
        "description" : "",
        "operationId" : "edit",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "configUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "Config",
          "description" : "Configuration data to be updated",
          "required" : true,
          "schema" : {
            "type" : "object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Customer Config"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Customer Config" ],
        "summary" : "Delete customer configuration",
        "description" : "",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "configUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/configs" : {
      "get" : {
        "tags" : [ "Customer Config" ],
        "summary" : "List of customer configuration",
        "description" : "",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Customer Config"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Customer Config" ],
        "summary" : "Create customer configuration",
        "description" : "",
        "operationId" : "create",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "Config",
          "description" : "Configuration data to be created",
          "required" : true,
          "schema" : {
            "type" : "object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Customer Config"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/regions" : {
      "get" : {
        "tags" : [ "Region" ],
        "summary" : "list all Regions across all providers",
        "description" : "",
        "operationId" : "listAllRegions",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Region"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/regions/{rUUID}" : {
      "delete" : {
        "tags" : [ "Region" ],
        "summary" : "delete",
        "description" : "",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "rUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/regions" : {
      "get" : {
        "tags" : [ "Region" ],
        "summary" : "list Regions for a specific provider",
        "description" : "",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Region"
              }
            }
          },
          "500" : {
            "description" : "If there was a server or database issue when listing the regions",
            "schema" : {
              "$ref" : "#/definitions/Generic error response from Yugawware Platform API"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Region" ],
        "summary" : "create new region",
        "description" : "",
        "operationId" : "create",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "region",
          "description" : "region form data for new region to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RegionFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Region"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/metrics" : {
      "post" : {
        "operationId" : "metrics",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/features" : {
      "put" : {
        "operationId" : "upsertFeatures",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/host_info" : {
      "get" : {
        "operationId" : "getHostInfo",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}" : {
      "get" : {
        "summary" : "getCustomer",
        "description" : "",
        "operationId" : "index",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          }
        }
      },
      "put" : {
        "operationId" : "update",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "summary" : "deleteCustomer",
        "description" : "",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        }
      }
    },
    "/api/v1/customers" : {
      "get" : {
        "operationId" : "list",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/alerts/acknowledge" : {
      "post" : {
        "tags" : [ "Alert" ],
        "summary" : "acknowledgeAlerts",
        "description" : "",
        "operationId" : "acknowledge",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "AcknowledgeAlertsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertApiFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Alert"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alerts/active" : {
      "get" : {
        "tags" : [ "Alert" ],
        "summary" : "listActiveAlerts",
        "description" : "",
        "operationId" : "listActive",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Alert"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alerts/page" : {
      "post" : {
        "tags" : [ "Alert" ],
        "summary" : "pageAlerts",
        "description" : "",
        "operationId" : "pageAlerts",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "PageAlertsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertPagedApiQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertPagedResponse"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_definition_templates" : {
      "post" : {
        "tags" : [ "Alert" ],
        "summary" : "listDefinitionGroupTemplates",
        "description" : "",
        "operationId" : "listDefinitionGroupTemplates",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "ListTemplatesRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertDefinitionTemplateApiFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AlertDefinitionGroup"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_definition_groups/{groupUUID}" : {
      "get" : {
        "tags" : [ "Alert" ],
        "summary" : "getDefinitionGroup",
        "description" : "",
        "operationId" : "getDefinitionGroup",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "groupUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertDefinitionGroup"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Alert" ],
        "summary" : "updateDefinitionGroup",
        "description" : "",
        "operationId" : "updateDefinitionGroup",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "groupUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "UpdateGroupRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertDefinitionGroup"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertDefinitionGroup"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Alert" ],
        "summary" : "deleteDefinitionGroup",
        "description" : "",
        "operationId" : "deleteDefinitionGroup",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "groupUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_definition_groups/page" : {
      "post" : {
        "tags" : [ "Alert" ],
        "summary" : "pageDefinitionGroups",
        "description" : "",
        "operationId" : "pageDefinitionGroups",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "PageDefinitionGroupsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertDefinitionGroupPagedApiQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertDefinitionGroupPagedResponse"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_definition_groups/list" : {
      "post" : {
        "tags" : [ "Alert" ],
        "summary" : "listDefinitionGroups",
        "description" : "",
        "operationId" : "listDefinitionGroups",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "ListGroupsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertDefinitionGroupApiFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AlertDefinitionGroup"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_definition_groups" : {
      "post" : {
        "tags" : [ "Alert" ],
        "summary" : "createDefinitionGroup",
        "description" : "",
        "operationId" : "createDefinitionGroup",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "CreateGroupRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertDefinitionGroup"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertDefinitionGroup"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_receivers" : {
      "get" : {
        "tags" : [ "Alert" ],
        "summary" : "listAlertReceivers",
        "description" : "",
        "operationId" : "listAlertReceivers",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AlertReceiver"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Alert" ],
        "summary" : "createAlertReceiver",
        "description" : "",
        "operationId" : "createAlertReceiver",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "CreateAlertReceiverRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertReceiverFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertReceiver"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_receivers/{arcUUID}" : {
      "get" : {
        "tags" : [ "Alert" ],
        "summary" : "getAlertReceiver",
        "description" : "",
        "operationId" : "getAlertReceiver",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "arcUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertReceiver"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Alert" ],
        "summary" : "updateAlertReceiver",
        "description" : "",
        "operationId" : "updateAlertReceiver",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "arcUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "UpdateAlertReceiverRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertReceiverFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertReceiver"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Alert" ],
        "summary" : "deleteAlertReceiver",
        "description" : "",
        "operationId" : "deleteAlertReceiver",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "arcUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_routes" : {
      "get" : {
        "tags" : [ "Alert" ],
        "summary" : "listAlertRoutes",
        "description" : "",
        "operationId" : "listAlertRoutes",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AlertRoute"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Alert" ],
        "summary" : "createAlertRoute",
        "description" : "",
        "operationId" : "createAlertRoute",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "CreateAlertRouteRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertRouteFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertRoute"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_routes/{artUUID}" : {
      "get" : {
        "tags" : [ "Alert" ],
        "summary" : "getAlertRoute",
        "description" : "",
        "operationId" : "getAlertRoute",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "artUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertRoute"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Alert" ],
        "summary" : "updateAlertRoute",
        "description" : "",
        "operationId" : "updateAlertRoute",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "artUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "UpdateAlertRouteRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertRouteFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertRoute"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Alert" ],
        "summary" : "deleteAlertRoute",
        "description" : "",
        "operationId" : "deleteAlertRoute",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "artUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/alerts" : {
      "get" : {
        "tags" : [ "Alert" ],
        "summary" : "listAlerts",
        "description" : "",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Alert"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}" : {
      "get" : {
        "tags" : [ "Universe" ],
        "summary" : "getUniverse",
        "description" : "",
        "operationId" : "index",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UniverseResp"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Universe" ],
        "summary" : "Destroy the universe",
        "description" : "",
        "operationId" : "destroy",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "isForceDelete",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isDeleteBackups",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes" : {
      "get" : {
        "tags" : [ "Universe" ],
        "summary" : "List Universes",
        "description" : "",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "null"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UniverseResp"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/status" : {
      "get" : {
        "tags" : [ "UniverseInfo" ],
        "summary" : "Status of the Universe",
        "description" : "This will return a Map of node name to its status in json format",
        "operationId" : "universeStatus",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/health_check" : {
      "get" : {
        "tags" : [ "UniverseInfo" ],
        "summary" : "health Check",
        "description" : "",
        "operationId" : "healthCheck",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/cost" : {
      "get" : {
        "tags" : [ "UniverseInfo" ],
        "summary" : "list universe cost for all universes",
        "description" : "",
        "operationId" : "universeListCost",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UniverseResourceDetails"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/cost" : {
      "get" : {
        "tags" : [ "UniverseInfo" ],
        "summary" : "universeCost",
        "description" : "",
        "operationId" : "universeCost",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UniverseResourceDetails"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/leader" : {
      "get" : {
        "tags" : [ "UniverseInfo" ],
        "summary" : "getMasterLeaderIP",
        "description" : "",
        "operationId" : "getMasterLeaderIP",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/live_queries" : {
      "get" : {
        "tags" : [ "UniverseInfo" ],
        "summary" : "getLiveQueries",
        "description" : "",
        "operationId" : "getLiveQueries",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/slow_queries" : {
      "get" : {
        "tags" : [ "UniverseInfo" ],
        "summary" : "getSlowQueries",
        "description" : "",
        "operationId" : "getSlowQueries",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "UniverseInfo" ],
        "summary" : "resetSlowQueries",
        "description" : "",
        "operationId" : "resetSlowQueries",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/{nodeName}/download_logs" : {
      "get" : {
        "tags" : [ "UniverseInfo" ],
        "operationId" : "downloadNodeLogs",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "nodeName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/universes/{uniUUID}/proxy/{proxyUrl}" : {
      "get" : {
        "operationId" : "proxyRequest",
        "parameters" : [ {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "proxyUrl",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/logout" : {
      "get" : {
        "operationId" : "logout",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/login" : {
      "post" : {
        "summary" : "login",
        "description" : "",
        "operationId" : "login",
        "parameters" : [ {
          "in" : "body",
          "name" : "loginFormData",
          "description" : "login form data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomerLoginFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/v1/insecure_login" : {
      "get" : {
        "summary" : "insecureLogin",
        "description" : "",
        "operationId" : "insecure_login",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/v1/platform_config" : {
      "get" : {
        "operationId" : "getPlatformConfig",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/third_party_login" : {
      "get" : {
        "operationId" : "thirdPartyLogin",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/security" : {
      "put" : {
        "operationId" : "set_security",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/api_token" : {
      "put" : {
        "summary" : "apiToken",
        "description" : "",
        "operationId" : "api_token",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/v1/customer_count" : {
      "get" : {
        "operationId" : "customerCount",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/app_version" : {
      "get" : {
        "operationId" : "appVersion",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/logs/{maxLines}" : {
      "get" : {
        "operationId" : "getLogs",
        "parameters" : [ {
          "name" : "maxLines",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/ui_theme" : {
      "get" : {
        "operationId" : "getUITheme",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/register" : {
      "post" : {
        "operationId" : "register",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/regions/{rUUID}/zones/{azUUID}" : {
      "delete" : {
        "tags" : [ "AvailabilityZone" ],
        "summary" : "deleteAZ",
        "description" : "",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "rUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "azUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/regions/{rUUID}/zones" : {
      "get" : {
        "tags" : [ "AvailabilityZone" ],
        "summary" : "listAZ",
        "description" : "",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "rUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AvailabilityZone"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "AvailabilityZone" ],
        "summary" : "createAZ",
        "description" : "",
        "operationId" : "create",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "rUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "azFormData",
          "description" : "az form data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AvailabilityZoneFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/definitions/AvailabilityZone"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/setup_universe_2dc" : {
      "put" : {
        "tags" : [ "Universe Actions" ],
        "summary" : "resetVersion",
        "description" : "",
        "operationId" : "resetVersion",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/set_key" : {
      "post" : {
        "tags" : [ "Universe Actions" ],
        "summary" : "setUniverseKey",
        "description" : "",
        "operationId" : "setUniverseKey",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UniverseResp"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/pause" : {
      "post" : {
        "tags" : [ "Universe Actions" ],
        "summary" : "Pause the universe",
        "description" : "",
        "operationId" : "pause",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/mark_helm3_compatible" : {
      "put" : {
        "tags" : [ "Universe Actions" ],
        "summary" : "Set the universe as helm3 compatible",
        "description" : "",
        "operationId" : "setHelm3Compatible",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/update_backup_state" : {
      "put" : {
        "tags" : [ "Universe Actions" ],
        "summary" : "Set backup Flag for a universe",
        "description" : "",
        "operationId" : "setBackupFlag",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "markActive",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/config_alerts" : {
      "post" : {
        "tags" : [ "Universe Actions" ],
        "summary" : "Configure Alerts for a universe",
        "description" : "",
        "operationId" : "configureAlerts",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/toggle_tls" : {
      "post" : {
        "tags" : [ "Universe Actions" ],
        "summary" : "API that toggles TLS state of the universe.",
        "description" : "Can enable/disable node to node and client to node encryption. Supports rolling and non-rolling upgrade of the universe.",
        "operationId" : "toggleTls",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UniverseResp"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/resume" : {
      "post" : {
        "tags" : [ "Universe Actions" ],
        "summary" : "Resume the universe",
        "description" : "",
        "operationId" : "resume",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/zones/{azUUID}/nodes/list" : {
      "get" : {
        "tags" : [ "Node Instances" ],
        "summary" : "List of node instances by zone",
        "description" : "",
        "operationId" : "listByZone",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "azUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/NodeInstance"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/nodes/list" : {
      "get" : {
        "tags" : [ "Node Instances" ],
        "summary" : "List of node instances by provider",
        "description" : "",
        "operationId" : "listByProvider",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/NodeInstance"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/instances/{instanceIP}" : {
      "delete" : {
        "tags" : [ "Node Instances" ],
        "summary" : "Delete node instance by IP",
        "description" : "",
        "operationId" : "deleteInstance",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "instanceIP",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{universeUUID}/nodes/{nodeName}" : {
      "put" : {
        "tags" : [ "Node Instances" ],
        "summary" : "Update node actions",
        "description" : "",
        "operationId" : "nodeAction",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "universeUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "nodeName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "Node action",
          "description" : "Node action data to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeActionFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/nodes/{nodeUUID}/list" : {
      "get" : {
        "tags" : [ "Node Instances" ],
        "summary" : "Get node instance by UUID",
        "description" : "",
        "operationId" : "get",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "nodeUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NodeInstance"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/zones/{azUUID}/nodes" : {
      "post" : {
        "tags" : [ "Node Instances" ],
        "summary" : "Create node instance",
        "description" : "",
        "operationId" : "create",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "azUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "Node instance",
          "description" : "Node instance data to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeInstanceFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/definitions/NodeInstance"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/bootstrap" : {
      "post" : {
        "tags" : [ "Provider" ],
        "operationId" : "bootstrap",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/edit" : {
      "put" : {
        "tags" : [ "Provider" ],
        "summary" : "editProvider",
        "description" : "",
        "operationId" : "edit",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "EditProviderFormData",
          "description" : "edit provider form data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EditProviderRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Provider"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/kubernetes" : {
      "post" : {
        "tags" : [ "Provider" ],
        "operationId" : "createKubernetes",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/suggested_kubernetes_config" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : "getSuggestedKubernetesConfigs",
        "description" : " Performs discovery of region, zones, pull secret, storageClass when running inside a Kubernetes cluster. Returns the discovered information as a JSON, which is similar to the one which is passed to the createKubernetes method.",
        "operationId" : "getSuggestedKubernetesConfigs",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/KubernetesProviderFormData"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/initialize" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : "refreshPricing",
        "description" : "Refresh Provider pricing info",
        "operationId" : "initialize",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "pUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/import" : {
      "post" : {
        "summary" : "import",
        "description" : "",
        "operationId" : "importUniverse",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/certificates" : {
      "get" : {
        "operationId" : "list",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "post" : {
        "summary" : "upload",
        "description" : "",
        "operationId" : "upload",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/certificates/{rUUID}/download" : {
      "get" : {
        "operationId" : "getRootCert",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "rUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/certificates/{rUUID}" : {
      "post" : {
        "summary" : "TODO",
        "description" : "",
        "operationId" : "getClientCert",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "rUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "rUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/certificates/{rUUID}/update_empty_cert" : {
      "post" : {
        "summary" : "update empty certs",
        "description" : "",
        "operationId" : "updateEmptyCustomCert",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "rUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CertificateInfo"
            }
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/certificates/{name}" : {
      "get" : {
        "operationId" : "get",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/v1/customers/{cUUID}/releases" : {
      "get" : {
        "tags" : [ "Release" ],
        "summary" : "Get list of releases",
        "description" : "",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "includeMetadata",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Release" ],
        "summary" : "Create release",
        "description" : "",
        "operationId" : "create",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "Release",
          "description" : "Release data to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ReleaseFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Release" ],
        "summary" : "Refresh release",
        "description" : "",
        "operationId" : "refresh",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/releases/{name}" : {
      "put" : {
        "tags" : [ "Release" ],
        "summary" : "Update release",
        "description" : "",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "Release",
          "description" : "Release data to be updated",
          "required" : true,
          "schema" : {
            "type" : "object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Release data"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/kms" : {
      "get" : {
        "tags" : [ "Encryption At Rest" ],
        "summary" : "Get key ref History",
        "description" : "",
        "operationId" : "getKeyRefHistory",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Encryption At Rest" ],
        "summary" : "Retrive KMS key",
        "description" : "",
        "operationId" : "retrieveKey",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Encryption At Rest" ],
        "summary" : "Remove key ref History",
        "description" : "",
        "operationId" : "removeKeyRefHistory",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/kms_configs" : {
      "get" : {
        "tags" : [ "Encryption At Rest" ],
        "summary" : "List KMS config",
        "description" : "",
        "operationId" : "listKMSConfigs",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/kms_configs/{configUUID}" : {
      "get" : {
        "tags" : [ "Encryption At Rest" ],
        "summary" : "KMS config detail by config UUID",
        "description" : "",
        "operationId" : "getKMSConfig",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "configUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Encryption At Rest" ],
        "summary" : "Delete KMS config",
        "description" : "",
        "operationId" : "deleteKMSConfig",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "configUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/kms_configs/{kmsProvider}" : {
      "post" : {
        "tags" : [ "Encryption At Rest" ],
        "summary" : "Create KMS config",
        "description" : "",
        "operationId" : "createKMSConfig",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "kmsProvider",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "KMS Config",
          "description" : "KMS Config to be created",
          "required" : true,
          "schema" : {
            "type" : "object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/kms/key_ref" : {
      "get" : {
        "tags" : [ "Encryption At Rest" ],
        "summary" : "Get key ref",
        "description" : "",
        "operationId" : "getCurrentKeyRef",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/run_query" : {
      "post" : {
        "tags" : [ "Universe YB Database" ],
        "summary" : "Run YSQL query against this universe",
        "description" : "Only valid when platform is running in mode is `OSS`",
        "operationId" : "runQuery",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/run_in_shell" : {
      "post" : {
        "tags" : [ "Universe YB Database" ],
        "summary" : "run command in shell",
        "description" : "This operation is no longer supported due to security reasons",
        "operationId" : "runInShell",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Generic error response from Yugawware Platform API"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/update_db_credentials" : {
      "post" : {
        "tags" : [ "Universe YB Database" ],
        "summary" : "setDatabaseCredentials",
        "description" : "",
        "operationId" : "setDatabaseCredentials",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/create_db_credentials" : {
      "post" : {
        "tags" : [ "Universe YB Database" ],
        "summary" : "createUserInDB",
        "description" : "",
        "operationId" : "createUserInDB",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Describe table",
        "description" : "",
        "operationId" : "describe",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "tableUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Universe task"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Alter table in Yugabyte DB",
        "description" : "",
        "operationId" : "alter",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "tableUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Tables" ],
        "summary" : "Drop table in Yugabyte DB",
        "description" : "",
        "operationId" : "drop",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "tableUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}/bulk_import" : {
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Bulk import table",
        "description" : "",
        "operationId" : "bulkImport",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "tableUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "Bulk import",
          "description" : "Bulk data to be Imported",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Bulk import params"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}/create_backup" : {
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Create table backup",
        "description" : "",
        "operationId" : "createBackup",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "tableUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "Backup",
          "description" : "Backup data to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Backup table params"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "List of tables",
        "description" : "",
        "operationId" : "listTables",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TableInfo"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Tables" ],
        "summary" : "Create table in Yugabyte DB",
        "description" : "",
        "operationId" : "create",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "Table",
          "description" : "Table Definition to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Universe task"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YWTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/multi_table_backup" : {
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Create multiple table backup",
        "description" : "",
        "operationId" : "createMultiTableBackup",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "Table backup",
          "description" : "Table backup data to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Multi table backup request params"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "If requested schedule backup.",
            "schema" : {
              "$ref" : "#/definitions/Schedule"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/metadata/yql_data_types" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get columns Types",
        "description" : "",
        "operationId" : "getYQLDataTypes",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "TINYINT", "SMALLINT", "INT", "BIGINT", "VARCHAR", "BOOLEAN", "FLOAT", "DOUBLE_PRECISION", "BLOB", "TIMESTAMP", "DECIMAL", "VARINT", "INET", "LIST", "MAP", "SET", "UUID", "TIMEUUID", "FROZEN", "DATE", "TIME", "JSONB", "USER_DEFINED_TYPE" ]
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/runtime_config/{scope}" : {
      "get" : {
        "tags" : [ "RuntimeConfig" ],
        "summary" : "list config entries for a scope",
        "description" : "Lists all runtime config entries for a given scopes for current customer.",
        "operationId" : "getConfig",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "scope",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "includeInherited",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Runtime config data"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/runtime_config/mutable_keys" : {
      "get" : {
        "tags" : [ "RuntimeConfig" ],
        "summary" : "list Mutable keys",
        "description" : "List all the mutable runtime config keys",
        "operationId" : "listKeys",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/runtime_config/{scope}/key/{key}" : {
      "get" : {
        "tags" : [ "RuntimeConfig" ],
        "summary" : "getKey",
        "description" : "",
        "operationId" : "getKey",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "scope",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "key",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "RuntimeConfig" ],
        "summary" : "setKey",
        "description" : "",
        "operationId" : "setKey",
        "consumes" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "scope",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "key",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "newValue",
          "description" : "new value for config key",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "RuntimeConfig" ],
        "summary" : "deleteKey",
        "description" : "",
        "operationId" : "deleteKey",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "scope",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "key",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/runtime_config/scopes" : {
      "get" : {
        "tags" : [ "RuntimeConfig" ],
        "summary" : "listScopes",
        "description" : "Lists all (including empty scopes) runtime config scopes for current customer. List includes the Global scope that spans multiple customers, scope for customer specific overrides for current customer and one scope each for each universe and provider.",
        "operationId" : "listScopes",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Runtime config data"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tablet-servers" : {
      "get" : {
        "tags" : [ "Tablet Server" ],
        "summary" : "List of tablet server",
        "description" : "",
        "operationId" : "listTabletServers",
        "parameters" : [ {
          "name" : "cUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "uniUUID",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "apiKeyAuth" : {
      "description" : "Api key passed as header",
      "type" : "apiKey",
      "name" : "X-AUTH-YW-API-TOKEN",
      "in" : "header"
    }
  },
  "definitions" : {
    "YWTask" : {
      "type" : "object",
      "required" : [ "taskUUID" ],
      "properties" : {
        "taskUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "resourceUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "UUID of the resource being modified  by the task",
          "readOnly" : true
        }
      }
    },
    "AvailabilityZone" : {
      "type" : "object",
      "required" : [ "active", "code", "kubeconfigPath", "name", "subnet", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "code" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "subnet" : {
          "type" : "string"
        },
        "kubeconfigPath" : {
          "type" : "string"
        }
      }
    },
    "Provider" : {
      "type" : "object",
      "required" : [ "hostedZoneId", "hostedZoneName", "regions" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Provide uuid",
          "readOnly" : true
        },
        "code" : {
          "type" : "string",
          "description" : "Cloud Provider code"
        },
        "name" : {
          "type" : "string",
          "description" : "Cloud Provider code"
        },
        "active" : {
          "type" : "boolean",
          "description" : "Cloud Provider code",
          "readOnly" : true
        },
        "customerUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Cloud Provider code",
          "readOnly" : true
        },
        "regions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Region"
          }
        },
        "keyPairName" : {
          "type" : "string",
          "description" : "Transient property - only present in mutate API request"
        },
        "sshPrivateKeyContent" : {
          "type" : "string",
          "description" : "Transient property - only present in mutate API request"
        },
        "sshUser" : {
          "type" : "string",
          "description" : "Transient property - only present in mutate API request"
        },
        "airGapInstall" : {
          "type" : "boolean",
          "description" : "Transient property - only present in mutate API request"
        },
        "sshPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Transient property - only present in mutate API request"
        },
        "hostVpcId" : {
          "type" : "string",
          "description" : "Transient property - only present in mutate API request"
        },
        "hostVpcRegion" : {
          "type" : "string",
          "description" : "Transient property - only present in mutate API request"
        },
        "customHostCidrs" : {
          "type" : "array",
          "description" : "Transient property - only present in mutate API request",
          "items" : {
            "type" : "string"
          }
        },
        "destVpcId" : {
          "type" : "string",
          "description" : "Transient property - only present in mutate API request"
        },
        "hostedZoneName" : {
          "type" : "string"
        },
        "hostedZoneId" : {
          "type" : "string"
        },
        "config" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "Region" : {
      "type" : "object",
      "required" : [ "details", "securityGroupId", "vnetName", "zones" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Region uuid",
          "readOnly" : true
        },
        "code" : {
          "type" : "string",
          "example" : "us-west-2",
          "description" : "Cloud provider region code",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "example" : "TODO",
          "description" : "Cloud provider region name"
        },
        "ybImage" : {
          "type" : "string",
          "example" : "TODO",
          "description" : "The AMI to be used in this region."
        },
        "longitude" : {
          "type" : "number",
          "format" : "double",
          "example" : -120.01,
          "description" : "Longitude of this region",
          "readOnly" : true
        },
        "latitude" : {
          "type" : "number",
          "format" : "double",
          "example" : 37.22,
          "description" : "Latitude of this region",
          "readOnly" : true
        },
        "zones" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AvailabilityZone"
          }
        },
        "details" : {
          "$ref" : "#/definitions/RegionDetails"
        },
        "securityGroupId" : {
          "type" : "string"
        },
        "vnetName" : {
          "type" : "string"
        },
        "config" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Region within a given provider. Typically this will map to a single cloud provider region"
    },
    "RegionDetails" : {
      "type" : "object",
      "required" : [ "sg_id", "vnet" ],
      "properties" : {
        "sg_id" : {
          "type" : "string"
        },
        "vnet" : {
          "type" : "string"
        }
      }
    },
    "ArrayNode" : {
      "type" : "object",
      "required" : [ "array", "bigDecimal", "bigInteger", "binary", "boolean", "containerNode", "double", "float", "floatingPointNumber", "int", "integralNumber", "long", "missingNode", "nodeType", "null", "number", "object", "pojo", "short", "textual", "valueNode" ],
      "properties" : {
        "nodeType" : {
          "type" : "string",
          "enum" : [ "ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING" ]
        },
        "array" : {
          "type" : "boolean"
        },
        "float" : {
          "type" : "boolean"
        },
        "object" : {
          "type" : "boolean"
        },
        "valueNode" : {
          "type" : "boolean"
        },
        "containerNode" : {
          "type" : "boolean"
        },
        "missingNode" : {
          "type" : "boolean"
        },
        "pojo" : {
          "type" : "boolean"
        },
        "number" : {
          "type" : "boolean"
        },
        "integralNumber" : {
          "type" : "boolean"
        },
        "floatingPointNumber" : {
          "type" : "boolean"
        },
        "short" : {
          "type" : "boolean"
        },
        "int" : {
          "type" : "boolean"
        },
        "long" : {
          "type" : "boolean"
        },
        "double" : {
          "type" : "boolean"
        },
        "bigDecimal" : {
          "type" : "boolean"
        },
        "bigInteger" : {
          "type" : "boolean"
        },
        "textual" : {
          "type" : "boolean"
        },
        "boolean" : {
          "type" : "boolean"
        },
        "binary" : {
          "type" : "boolean"
        },
        "null" : {
          "type" : "boolean"
        }
      }
    },
    "Customer Config" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "configUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Config UUID",
          "readOnly" : true
        },
        "configName" : {
          "type" : "string",
          "example" : "backup20-01-2021",
          "description" : "Config name"
        },
        "customerUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Customer UUID",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "example" : "STORAGE",
          "description" : "Config type",
          "enum" : [ "STORAGE", "ALERTS", "CALLHOME", "PASSWORD_POLICY", "OTHER" ]
        },
        "name" : {
          "type" : "string",
          "example" : "S3",
          "description" : "Name"
        },
        "data" : {
          "example" : "{\"AWS_ACCESS_KEY_ID\": \"AK****************ZD\"}",
          "description" : "Configuration data",
          "$ref" : "#/definitions/JsonNode"
        },
        "universeDetails" : {
          "example" : "{\"name\": \"jd-aws-21-6-21-test4\"}",
          "description" : "Universe details",
          "$ref" : "#/definitions/ArrayNode"
        },
        "inUse" : {
          "type" : "boolean",
          "description" : "True if there is an in use reference to the object"
        }
      },
      "description" : "Customers Configuration"
    },
    "JsonNode" : {
      "type" : "object",
      "required" : [ "array", "bigDecimal", "bigInteger", "binary", "boolean", "containerNode", "double", "float", "floatingPointNumber", "int", "integralNumber", "long", "missingNode", "nodeType", "null", "number", "object", "pojo", "short", "textual", "valueNode" ],
      "properties" : {
        "float" : {
          "type" : "boolean"
        },
        "nodeType" : {
          "type" : "string",
          "enum" : [ "ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING" ]
        },
        "object" : {
          "type" : "boolean"
        },
        "valueNode" : {
          "type" : "boolean"
        },
        "containerNode" : {
          "type" : "boolean"
        },
        "missingNode" : {
          "type" : "boolean"
        },
        "pojo" : {
          "type" : "boolean"
        },
        "number" : {
          "type" : "boolean"
        },
        "integralNumber" : {
          "type" : "boolean"
        },
        "floatingPointNumber" : {
          "type" : "boolean"
        },
        "short" : {
          "type" : "boolean"
        },
        "int" : {
          "type" : "boolean"
        },
        "long" : {
          "type" : "boolean"
        },
        "double" : {
          "type" : "boolean"
        },
        "bigDecimal" : {
          "type" : "boolean"
        },
        "bigInteger" : {
          "type" : "boolean"
        },
        "textual" : {
          "type" : "boolean"
        },
        "boolean" : {
          "type" : "boolean"
        },
        "binary" : {
          "type" : "boolean"
        },
        "array" : {
          "type" : "boolean"
        },
        "null" : {
          "type" : "boolean"
        }
      }
    },
    "YWSuccess" : {
      "type" : "object",
      "required" : [ "message", "success" ],
      "properties" : {
        "success" : {
          "type" : "boolean"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "RegionFormData" : {
      "type" : "object",
      "required" : [ "code", "destVpcId", "hostVpcId", "hostVpcRegion", "latitude", "longitude", "name", "ybImage" ],
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "ybImage" : {
          "type" : "string"
        },
        "hostVpcRegion" : {
          "type" : "string"
        },
        "hostVpcId" : {
          "type" : "string"
        },
        "destVpcId" : {
          "type" : "string"
        },
        "latitude" : {
          "type" : "number",
          "format" : "double"
        },
        "longitude" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "Generic error response from Yugawware Platform API" : {
      "type" : "object",
      "required" : [ "success" ],
      "properties" : {
        "success" : {
          "type" : "boolean"
        },
        "error" : {
          "type" : "string",
          "example" : "There was a problem creating universe",
          "description" : "User visible unstructurred error message"
        }
      }
    },
    "Customer" : {
      "type" : "object",
      "required" : [ "code", "creationDate", "customerId", "features", "name", "universeUUIDs", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "code" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "creationDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "features" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "universeUUIDs" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "customerId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "Alert" : {
      "type" : "object",
      "required" : [ "acknowledgedTime", "createTime", "customerUUID", "definitionUuid", "errCode", "groupType", "groupUuid", "labels", "message", "resolvedTime", "sendEmail", "severity", "state", "targetState", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "customerUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "createTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "acknowledgedTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "resolvedTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "errCode" : {
          "type" : "string"
        },
        "severity" : {
          "type" : "string",
          "enum" : [ "SEVERE", "WARNING" ]
        },
        "message" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "CREATED", "ACTIVE", "ACKNOWLEDGED", "RESOLVED" ]
        },
        "targetState" : {
          "type" : "string",
          "enum" : [ "CREATED", "ACTIVE", "ACKNOWLEDGED", "RESOLVED" ]
        },
        "sendEmail" : {
          "type" : "boolean"
        },
        "definitionUuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "groupUuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "groupType" : {
          "type" : "string",
          "enum" : [ "CUSTOMER", "UNIVERSE" ]
        },
        "labels" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AlertLabel"
          }
        }
      }
    },
    "AlertLabel" : {
      "type" : "object",
      "required" : [ "key", "name", "value" ],
      "properties" : {
        "key" : {
          "$ref" : "#/definitions/AlertLabelKey"
        },
        "value" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "AlertLabelKey" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "AlertApiFilter" : {
      "type" : "object",
      "required" : [ "groupType", "groupUuid", "severity", "states", "targetStates", "uuids" ],
      "properties" : {
        "uuids" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "groupUuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "severity" : {
          "type" : "string",
          "enum" : [ "SEVERE", "WARNING" ]
        },
        "groupType" : {
          "type" : "string",
          "enum" : [ "CUSTOMER", "UNIVERSE" ]
        },
        "states" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "CREATED", "ACTIVE", "ACKNOWLEDGED", "RESOLVED" ]
          }
        },
        "targetStates" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "CREATED", "ACTIVE", "ACKNOWLEDGED", "RESOLVED" ]
          }
        }
      }
    },
    "AlertPagedResponse" : {
      "type" : "object",
      "required" : [ "entities", "hasNext", "hasPrev", "totalCount" ],
      "properties" : {
        "entities" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Alert"
          }
        },
        "hasNext" : {
          "type" : "boolean"
        },
        "hasPrev" : {
          "type" : "boolean"
        },
        "totalCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "AlertPagedApiQuery" : {
      "type" : "object",
      "required" : [ "direction", "filter", "limit", "needTotalCount", "offset", "sortBy" ],
      "properties" : {
        "filter" : {
          "$ref" : "#/definitions/AlertApiFilter"
        },
        "sortBy" : {
          "type" : "string",
          "enum" : [ "CREATE_TIME", "SEVERITY" ]
        },
        "direction" : {
          "type" : "string",
          "enum" : [ "ASC", "DESC" ]
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32"
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32"
        },
        "needTotalCount" : {
          "type" : "boolean"
        }
      }
    },
    "AlertDefinitionGroup" : {
      "type" : "object",
      "required" : [ "active", "createTime", "customerUUID", "description", "durationSec", "name", "routeUUID", "target", "targetType", "template", "thresholdUnit", "thresholds", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "customerUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "createTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "targetType" : {
          "type" : "string",
          "enum" : [ "CUSTOMER", "UNIVERSE" ]
        },
        "target" : {
          "$ref" : "#/definitions/AlertDefinitionGroupTarget"
        },
        "thresholds" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/AlertDefinitionGroupThreshold"
          }
        },
        "thresholdUnit" : {
          "type" : "string",
          "enum" : [ "PERCENT", "MILLISECOND" ]
        },
        "template" : {
          "type" : "string",
          "enum" : [ "REPLICATION_LAG", "CLOCK_SKEW", "MEMORY_CONSUMPTION" ]
        },
        "durationSec" : {
          "type" : "integer",
          "format" : "int32"
        },
        "active" : {
          "type" : "boolean"
        },
        "routeUUID" : {
          "type" : "string",
          "format" : "uuid"
        }
      }
    },
    "AlertDefinitionGroupTarget" : {
      "type" : "object",
      "required" : [ "all", "uuids" ],
      "properties" : {
        "all" : {
          "type" : "boolean"
        },
        "uuids" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      }
    },
    "AlertDefinitionGroupThreshold" : {
      "type" : "object",
      "required" : [ "condition", "threshold" ],
      "properties" : {
        "condition" : {
          "type" : "string",
          "enum" : [ "GREATER_THAN", "LESS_THAN" ]
        },
        "threshold" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "AlertDefinitionTemplateApiFilter" : {
      "type" : "object",
      "required" : [ "name", "targetType" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "targetType" : {
          "type" : "string",
          "enum" : [ "CUSTOMER", "UNIVERSE" ]
        }
      }
    },
    "AlertDefinitionGroupPagedResponse" : {
      "type" : "object",
      "required" : [ "entities", "hasNext", "hasPrev", "totalCount" ],
      "properties" : {
        "entities" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AlertDefinitionGroup"
          }
        },
        "hasNext" : {
          "type" : "boolean"
        },
        "hasPrev" : {
          "type" : "boolean"
        },
        "totalCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "AlertDefinitionGroupApiFilter" : {
      "type" : "object",
      "required" : [ "active", "name", "routeUuid", "targetType", "template", "uuids" ],
      "properties" : {
        "uuids" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "name" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "targetType" : {
          "type" : "string",
          "enum" : [ "CUSTOMER", "UNIVERSE" ]
        },
        "template" : {
          "type" : "string",
          "enum" : [ "REPLICATION_LAG", "CLOCK_SKEW", "MEMORY_CONSUMPTION" ]
        },
        "routeUuid" : {
          "type" : "string",
          "format" : "uuid"
        }
      }
    },
    "AlertDefinitionGroupPagedApiQuery" : {
      "type" : "object",
      "required" : [ "direction", "filter", "limit", "needTotalCount", "offset", "sortBy" ],
      "properties" : {
        "filter" : {
          "$ref" : "#/definitions/AlertDefinitionGroupApiFilter"
        },
        "sortBy" : {
          "type" : "string",
          "enum" : [ "NAME", "ACTIVE", "TARGET_TYPE", "CREATE_TIME", "ALERT_COUNT" ]
        },
        "direction" : {
          "type" : "string",
          "enum" : [ "ASC", "DESC" ]
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32"
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32"
        },
        "needTotalCount" : {
          "type" : "boolean"
        }
      }
    },
    "AlertReceiver" : {
      "type" : "object",
      "required" : [ "name", "params", "routes", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "params" : {
          "$ref" : "#/definitions/AlertReceiverParams"
        },
        "routes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/AlertRoute"
          }
        },
        "customer_uuid" : {
          "type" : "string",
          "format" : "uuid"
        }
      }
    },
    "AlertReceiverEmailParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertReceiverParams"
      }, {
        "type" : "object",
        "required" : [ "defaultRecipients", "defaultSmtpSettings", "recipients", "smtpData" ],
        "properties" : {
          "defaultRecipients" : {
            "type" : "boolean"
          },
          "recipients" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "defaultSmtpSettings" : {
            "type" : "boolean"
          },
          "smtpData" : {
            "$ref" : "#/definitions/SmtpData"
          }
        }
      } ]
    },
    "AlertReceiverParams" : {
      "type" : "object",
      "required" : [ "textTemplate", "titleTemplate" ],
      "discriminator" : "targetType",
      "properties" : {
        "titleTemplate" : {
          "type" : "string"
        },
        "textTemplate" : {
          "type" : "string"
        }
      }
    },
    "AlertReceiverSlackParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertReceiverParams"
      }, {
        "type" : "object",
        "required" : [ "channel", "iconUrl", "webhookUrl" ],
        "properties" : {
          "channel" : {
            "type" : "string"
          },
          "webhookUrl" : {
            "type" : "string"
          },
          "iconUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AlertRoute" : {
      "type" : "object",
      "required" : [ "customerUUID", "defaultRoute", "name", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "customerUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "receivers" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "defaultRoute" : {
          "type" : "boolean"
        }
      }
    },
    "SmtpData" : {
      "type" : "object",
      "required" : [ "emailFrom", "smtpPassword", "smtpPort", "smtpServer", "smtpUsername", "useSSL", "useTLS" ],
      "properties" : {
        "smtpServer" : {
          "type" : "string"
        },
        "smtpPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "emailFrom" : {
          "type" : "string"
        },
        "smtpUsername" : {
          "type" : "string"
        },
        "smtpPassword" : {
          "type" : "string"
        },
        "useSSL" : {
          "type" : "boolean"
        },
        "useTLS" : {
          "type" : "boolean"
        }
      }
    },
    "AlertReceiverFormData" : {
      "type" : "object",
      "required" : [ "alertReceiverUUID", "name", "params" ],
      "properties" : {
        "alertReceiverUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "params" : {
          "$ref" : "#/definitions/AlertReceiverParams"
        }
      }
    },
    "AlertRouteFormData" : {
      "type" : "object",
      "required" : [ "defaultRoute", "name", "receivers" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "defaultRoute" : {
          "type" : "boolean"
        },
        "receivers" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      }
    },
    "AsyncReplicationConfig" : {
      "type" : "object",
      "required" : [ "active", "sourceTableID", "sourceUniverseUUID", "targetTableID", "targetUniverseUUID" ],
      "properties" : {
        "sourceTableID" : {
          "type" : "string"
        },
        "sourceUniverseUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "targetTableID" : {
          "type" : "string"
        },
        "targetUniverseUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "active" : {
          "type" : "boolean"
        }
      }
    },
    "Cloud specific info" : {
      "type" : "object",
      "properties" : {
        "private_ip" : {
          "type" : "string",
          "description" : "Private IP"
        },
        "public_ip" : {
          "type" : "string",
          "description" : "Public IP"
        },
        "public_dns" : {
          "type" : "string",
          "description" : "Public DNS"
        },
        "private_dns" : {
          "type" : "string",
          "description" : "Private DNS"
        },
        "instance_type" : {
          "type" : "string",
          "description" : "Instance type"
        },
        "subnet_id" : {
          "type" : "string",
          "description" : "Subnet IP"
        },
        "az" : {
          "type" : "string",
          "description" : "AZ"
        },
        "region" : {
          "type" : "string",
          "description" : "Region"
        },
        "cloud" : {
          "type" : "string",
          "description" : "Cloud"
        },
        "assignPublicIP" : {
          "type" : "boolean",
          "description" : "Public IP assigned"
        },
        "useTimeSync" : {
          "type" : "boolean",
          "description" : "Is use time sync enable"
        },
        "mount_roots" : {
          "type" : "string",
          "description" : "Mount roots"
        }
      },
      "description" : "Cloud specific information"
    },
    "Cluster" : {
      "type" : "object",
      "required" : [ "clusterType", "index", "placementInfo", "userIntent", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "clusterType" : {
          "type" : "string",
          "enum" : [ "PRIMARY", "ASYNC" ]
        },
        "userIntent" : {
          "$ref" : "#/definitions/UserIntent"
        },
        "placementInfo" : {
          "$ref" : "#/definitions/PlacementInfo"
        },
        "index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "regions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Region"
          }
        }
      }
    },
    "Communication ports" : {
      "type" : "object",
      "properties" : {
        "masterHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "HTTP port for master table"
        },
        "masterRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "RCP port for master table"
        },
        "tserverHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "HTTP port for tserver"
        },
        "tserverRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "RPC port for tserver"
        },
        "redisServerHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "HTTP port for redis"
        },
        "redisServerRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "RPC port for redis"
        },
        "yqlServerHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "HTTP port for yql"
        },
        "yqlServerRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "RPC port for yql"
        },
        "ysqlServerHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "HTTP port for ysql"
        },
        "ysqlServerRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "RPC port for ysql"
        },
        "nodeExporterPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Node exporter port"
        }
      },
      "description" : "Communication ports"
    },
    "Device info" : {
      "type" : "object",
      "properties" : {
        "volumeSize" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "he size of each volume in each instance"
        },
        "numVolumes" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of volumes to be mounted on this instance at the default path"
        },
        "diskIops" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Desired iops for the volumes mounted on this instance"
        },
        "throughput" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Desired throughput for the volumes mounted on this instance"
        },
        "storageClass" : {
          "type" : "string",
          "description" : "Name of storage class"
        },
        "mountPoints" : {
          "type" : "string",
          "description" : "Comma separated list of mount points for the devices in each instance"
        },
        "storageType" : {
          "type" : "string",
          "description" : "The type of storage used for this instance",
          "enum" : [ "IO1", "GP2", "GP3", "Scratch", "Persistent", "StandardSSD_LRS", "Premium_LRS", "UltraSSD_LRS" ]
        }
      },
      "description" : "Device information"
    },
    "Encryption at rest config" : {
      "type" : "object",
      "properties" : {
        "encryptionAtRestEnabled" : {
          "type" : "boolean",
          "description" : "Whether a universe is currently encrypted at rest or not"
        },
        "kmsConfigUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "KMS configuration"
        },
        "opType" : {
          "type" : "string",
          "description" : "Whether to enable/disable/rotate universe key/encryption at rest",
          "enum" : [ "ENABLE", "DISABLE", "UNDEFINED" ]
        },
        "type" : {
          "type" : "string",
          "description" : "Whether to generate a data key or just retrieve the CMK arn",
          "enum" : [ "CMK", "DATA_KEY" ]
        }
      },
      "description" : "Encryption at rest config"
    },
    "Extra dependencies" : {
      "type" : "object",
      "properties" : {
        "installNodeExporter" : {
          "type" : "boolean",
          "description" : "Is install node exporter required"
        }
      },
      "description" : "Extra dependencies"
    },
    "Node details" : {
      "type" : "object",
      "properties" : {
        "nodeIdx" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Node id"
        },
        "nodeName" : {
          "type" : "string",
          "description" : "Node name"
        },
        "nodeUuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Node UUID"
        },
        "cloudInfo" : {
          "description" : "Cloud information",
          "$ref" : "#/definitions/Cloud specific info"
        },
        "azUuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Az UUID"
        },
        "placementUuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Placement UUID"
        },
        "machineImage" : {
          "type" : "string",
          "description" : "Machine image"
        },
        "state" : {
          "type" : "string",
          "description" : "Node state",
          "enum" : [ "ToBeAdded", "ToJoinCluster", "Provisioned", "SoftwareInstalled", "UpgradeSoftware", "UpdateGFlags", "Live", "Stopping", "Starting", "Stopped", "Unreachable", "ToBeRemoved", "Removing", "Removed", "Adding", "BeingDecommissioned", "Decommissioned", "UpdateCert", "ToggleTls", "Resizing" ]
        },
        "isMaster" : {
          "type" : "boolean",
          "description" : "True if this node is a master"
        },
        "masterHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Master HTTP port"
        },
        "masterRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Master RCP port"
        },
        "isTserver" : {
          "type" : "boolean",
          "description" : "True if this node is a tserver"
        },
        "tserverHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Tserver HTTP port"
        },
        "tserverRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Tserver RPC port"
        },
        "isRedisServer" : {
          "type" : "boolean",
          "description" : "True if this node is a redis server"
        },
        "redisServerHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Redis HTTP port"
        },
        "redisServerRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Redis RPC port"
        },
        "isYqlServer" : {
          "type" : "boolean",
          "description" : "True if this node is a Yql"
        },
        "yqlServerHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Yql HTTP port"
        },
        "yqlServerRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Yql RPC port"
        },
        "isYsqlServer" : {
          "type" : "boolean",
          "description" : "True if this node is a Ysql"
        },
        "ysqlServerHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Ysql HTTP port"
        },
        "ysqlServerRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Ysql RPC port"
        },
        "nodeExporterPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Node exporter port"
        },
        "cronsActive" : {
          "type" : "boolean",
          "description" : "True if cronjobs were properly configured for this node"
        }
      },
      "description" : "Node details"
    },
    "NodeDetailsResp" : {
      "type" : "object",
      "properties" : {
        "nodeIdx" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Node id"
        },
        "nodeName" : {
          "type" : "string",
          "description" : "Node name"
        },
        "nodeUuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Node UUID"
        },
        "cloudInfo" : {
          "description" : "Cloud information",
          "$ref" : "#/definitions/Cloud specific info"
        },
        "azUuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Az UUID"
        },
        "placementUuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Placement UUID"
        },
        "machineImage" : {
          "type" : "string",
          "description" : "Machine image"
        },
        "state" : {
          "type" : "string",
          "description" : "Node state",
          "enum" : [ "ToBeAdded", "ToJoinCluster", "Provisioned", "SoftwareInstalled", "UpgradeSoftware", "UpdateGFlags", "Live", "Stopping", "Starting", "Stopped", "Unreachable", "ToBeRemoved", "Removing", "Removed", "Adding", "BeingDecommissioned", "Decommissioned", "UpdateCert", "ToggleTls", "Resizing" ]
        },
        "isMaster" : {
          "type" : "boolean",
          "description" : "True if this node is a master"
        },
        "masterHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Master HTTP port"
        },
        "masterRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Master RCP port"
        },
        "isTserver" : {
          "type" : "boolean",
          "description" : "True if this node is a tserver"
        },
        "tserverHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Tserver HTTP port"
        },
        "tserverRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Tserver RPC port"
        },
        "isRedisServer" : {
          "type" : "boolean",
          "description" : "True if this node is a redis server"
        },
        "redisServerHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Redis HTTP port"
        },
        "redisServerRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Redis RPC port"
        },
        "isYqlServer" : {
          "type" : "boolean",
          "description" : "True if this node is a Yql"
        },
        "yqlServerHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Yql HTTP port"
        },
        "yqlServerRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Yql RPC port"
        },
        "isYsqlServer" : {
          "type" : "boolean",
          "description" : "True if this node is a Ysql"
        },
        "ysqlServerHttpPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Ysql HTTP port"
        },
        "ysqlServerRpcPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Ysql RPC port"
        },
        "nodeExporterPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Node exporter port"
        },
        "cronsActive" : {
          "type" : "boolean",
          "description" : "True if cronjobs were properly configured for this node"
        },
        "allowedActions" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "ADD", "REMOVE", "START", "STOP", "DELETE", "QUERY", "RELEASE", "START_MASTER" ]
          }
        }
      }
    },
    "PlacementAZ" : {
      "type" : "object",
      "required" : [ "isAffinitized", "name", "numNodesInAZ", "replicationFactor", "subnet", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "replicationFactor" : {
          "type" : "integer",
          "format" : "int32"
        },
        "subnet" : {
          "type" : "string"
        },
        "numNodesInAZ" : {
          "type" : "integer",
          "format" : "int32"
        },
        "isAffinitized" : {
          "type" : "boolean"
        }
      }
    },
    "PlacementCloud" : {
      "type" : "object",
      "required" : [ "code", "regionList", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "code" : {
          "type" : "string"
        },
        "regionList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PlacementRegion"
          }
        }
      }
    },
    "PlacementInfo" : {
      "type" : "object",
      "required" : [ "cloudList" ],
      "properties" : {
        "cloudList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PlacementCloud"
          }
        }
      }
    },
    "PlacementRegion" : {
      "type" : "object",
      "required" : [ "azList", "code", "name", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "code" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "azList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PlacementAZ"
          }
        }
      }
    },
    "Universe task" : {
      "type" : "object",
      "required" : [ "tableDetails", "tableType", "tableUUID" ],
      "properties" : {
        "errorString" : {
          "type" : "string",
          "description" : "Error message"
        },
        "nodeExporterUser" : {
          "type" : "string",
          "description" : "Node exporter user"
        },
        "deviceInfo" : {
          "description" : "Device information",
          "$ref" : "#/definitions/Device info"
        },
        "universeUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Associate universe UUID"
        },
        "expectedUniverseVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Universe version"
        },
        "cmkArn" : {
          "type" : "string",
          "description" : "Amazon Resource Name (ARN) of the CMK"
        },
        "encryptionAtRestConfig" : {
          "description" : "Encryption at rest configation",
          "$ref" : "#/definitions/Encryption at rest config"
        },
        "nodeDetailsSet" : {
          "type" : "array",
          "description" : "Node details",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Node details"
          }
        },
        "communicationPorts" : {
          "description" : "Communication ports",
          "$ref" : "#/definitions/Communication ports"
        },
        "extraDependencies" : {
          "description" : "Extra dependencies",
          "$ref" : "#/definitions/Extra dependencies"
        },
        "firstTry" : {
          "type" : "boolean",
          "description" : "Whether this task has been tried before or not"
        },
        "tableUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "tableType" : {
          "type" : "string",
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ]
        },
        "tableDetails" : {
          "$ref" : "#/definitions/Table details"
        },
        "targetAsyncReplicationRelationships" : {
          "type" : "array",
          "description" : "Async replication relationships as the target universe",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AsyncReplicationConfig"
          }
        },
        "sourceAsyncReplicationRelationships" : {
          "type" : "array",
          "description" : "Async replication relationships as the source universe",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AsyncReplicationConfig"
          }
        }
      },
      "description" : "Universe task"
    },
    "UniverseDefinitionTaskParamsResp" : {
      "type" : "object",
      "required" : [ "allowInsecure", "backupInProgress", "capability", "clientRootCA", "clusters", "currentClusterType", "importedState", "itestS3PackagePath", "nextClusterIndex", "nodePrefix", "remotePackagePath", "resetAZConfig", "rootAndClientRootCASame", "rootCA", "setTxnTableWaitCountFlag", "universePaused", "updateInProgress", "updateSucceeded", "userAZSelected" ],
      "properties" : {
        "errorString" : {
          "type" : "string",
          "description" : "Error message"
        },
        "nodeExporterUser" : {
          "type" : "string",
          "description" : "Node exporter user"
        },
        "deviceInfo" : {
          "description" : "Device information",
          "$ref" : "#/definitions/Device info"
        },
        "universeUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Associate universe UUID"
        },
        "expectedUniverseVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Universe version"
        },
        "cmkArn" : {
          "type" : "string",
          "description" : "Amazon Resource Name (ARN) of the CMK"
        },
        "encryptionAtRestConfig" : {
          "description" : "Encryption at rest configation",
          "$ref" : "#/definitions/Encryption at rest config"
        },
        "nodeDetailsSet" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/NodeDetailsResp"
          }
        },
        "communicationPorts" : {
          "description" : "Communication ports",
          "$ref" : "#/definitions/Communication ports"
        },
        "extraDependencies" : {
          "description" : "Extra dependencies",
          "$ref" : "#/definitions/Extra dependencies"
        },
        "firstTry" : {
          "type" : "boolean",
          "description" : "Whether this task has been tried before or not"
        },
        "clusters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Cluster"
          }
        },
        "currentClusterType" : {
          "type" : "string",
          "enum" : [ "PRIMARY", "ASYNC" ]
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "rootCA" : {
          "type" : "string",
          "format" : "uuid"
        },
        "clientRootCA" : {
          "type" : "string",
          "format" : "uuid"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "nextClusterIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "allowInsecure" : {
          "type" : "boolean"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "importedState" : {
          "type" : "string",
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ]
        },
        "capability" : {
          "type" : "string",
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ]
        },
        "targetAsyncReplicationRelationships" : {
          "type" : "array",
          "description" : "Async replication relationships as the target universe",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AsyncReplicationConfig"
          }
        },
        "sourceAsyncReplicationRelationships" : {
          "type" : "array",
          "description" : "Async replication relationships as the source universe",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AsyncReplicationConfig"
          }
        }
      }
    },
    "UniverseResourceDetails" : {
      "type" : "object",
      "required" : [ "azList", "ebsPricePerHour", "gp3FreePiops", "gp3FreeThroughput", "memSizeGB", "numCores", "numNodes", "pricePerHour", "volumeCount", "volumeSizeGB" ],
      "properties" : {
        "pricePerHour" : {
          "type" : "number",
          "format" : "double"
        },
        "ebsPricePerHour" : {
          "type" : "number",
          "format" : "double"
        },
        "numCores" : {
          "type" : "number",
          "format" : "double"
        },
        "memSizeGB" : {
          "type" : "number",
          "format" : "double"
        },
        "volumeCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "volumeSizeGB" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numNodes" : {
          "type" : "integer",
          "format" : "int32"
        },
        "gp3FreePiops" : {
          "type" : "integer",
          "format" : "int32"
        },
        "gp3FreeThroughput" : {
          "type" : "integer",
          "format" : "int32"
        },
        "azList" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "UniverseResp" : {
      "type" : "object",
      "required" : [ "creationDate", "dnsName", "name", "pricePerHour", "resources", "sampleAppCommandTxt", "taskUUID", "universeConfig", "universeDetails", "universeUUID", "version" ],
      "properties" : {
        "universeUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "creationDate" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32"
        },
        "dnsName" : {
          "type" : "string"
        },
        "resources" : {
          "$ref" : "#/definitions/UniverseResourceDetails"
        },
        "universeDetails" : {
          "$ref" : "#/definitions/UniverseDefinitionTaskParamsResp"
        },
        "universeConfig" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "taskUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "sampleAppCommandTxt" : {
          "type" : "string"
        },
        "pricePerHour" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "UserIntent" : {
      "type" : "object",
      "required" : [ "accessKeyCode", "assignPublicIP", "awsArnString", "deviceInfo", "enableClientToNodeEncrypt", "enableExposingService", "enableIPV6", "enableNodeToNodeEncrypt", "enableVolumeEncryption", "enableYEDIS", "enableYSQL", "instanceTags", "instanceType", "masterGFlags", "numNodes", "preferredRegion", "provider", "providerType", "regionList", "replicationFactor", "tserverGFlags", "universeName", "useHostname", "useTimeSync", "ybSoftwareVersion" ],
      "properties" : {
        "universeName" : {
          "type" : "string"
        },
        "provider" : {
          "type" : "string"
        },
        "providerType" : {
          "type" : "string",
          "enum" : [ "unknown", "aws", "gcp", "azu", "docker", "onprem", "kubernetes", "local", "other" ]
        },
        "replicationFactor" : {
          "type" : "integer",
          "format" : "int32"
        },
        "regionList" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "preferredRegion" : {
          "type" : "string",
          "format" : "uuid"
        },
        "instanceType" : {
          "type" : "string"
        },
        "numNodes" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ybSoftwareVersion" : {
          "type" : "string"
        },
        "accessKeyCode" : {
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/Device info"
        },
        "assignPublicIP" : {
          "type" : "boolean"
        },
        "useTimeSync" : {
          "type" : "boolean"
        },
        "enableYSQL" : {
          "type" : "boolean"
        },
        "enableYEDIS" : {
          "type" : "boolean"
        },
        "enableNodeToNodeEncrypt" : {
          "type" : "boolean"
        },
        "enableClientToNodeEncrypt" : {
          "type" : "boolean"
        },
        "enableVolumeEncryption" : {
          "type" : "boolean"
        },
        "enableIPV6" : {
          "type" : "boolean"
        },
        "enableExposingService" : {
          "type" : "string",
          "enum" : [ "NONE", "EXPOSED", "UNEXPOSED" ]
        },
        "awsArnString" : {
          "type" : "string"
        },
        "useHostname" : {
          "type" : "boolean"
        },
        "masterGFlags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "tserverGFlags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "instanceTags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "CustomerLoginFormData" : {
      "type" : "object",
      "required" : [ "email", "password" ],
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        }
      }
    },
    "AvailabilityZoneData" : {
      "type" : "object",
      "required" : [ "code", "name", "subnet" ],
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "subnet" : {
          "type" : "string"
        }
      }
    },
    "AvailabilityZoneFormData" : {
      "type" : "object",
      "required" : [ "availabilityZones" ],
      "properties" : {
        "availabilityZones" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AvailabilityZoneData"
          }
        }
      }
    },
    "NodeInstance" : {
      "type" : "object",
      "required" : [ "details" ],
      "properties" : {
        "nodeUuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Node instance UUID",
          "readOnly" : true
        },
        "instanceTypeCode" : {
          "type" : "string",
          "example" : "c5large",
          "description" : "Node instance type code"
        },
        "nodeName" : {
          "type" : "string",
          "example" : "India node",
          "description" : "Node instance node name"
        },
        "instanceName" : {
          "type" : "string",
          "example" : "Mumbai instance",
          "description" : "Node instance instance name"
        },
        "zoneUuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Node instance zone UUID"
        },
        "inUse" : {
          "type" : "boolean",
          "description" : "Node instance is in used or not"
        },
        "details" : {
          "$ref" : "#/definitions/NodeInstanceData"
        },
        "detailsJson" : {
          "type" : "string",
          "example" : "{\"ip\":\"1.1.1.1\",\"sshUser\":\"centos\"}",
          "description" : "Node details"
        }
      },
      "description" : "Node instance attched to provider and zones"
    },
    "NodeInstanceData" : {
      "type" : "object",
      "required" : [ "instanceName", "instanceType", "ip", "region", "sshUser", "zone" ],
      "properties" : {
        "ip" : {
          "type" : "string",
          "example" : "1.1.1.1",
          "description" : "IP address of node instance"
        },
        "sshUser" : {
          "type" : "string",
          "example" : "centos",
          "description" : "SSH user of node instance"
        },
        "region" : {
          "type" : "string",
          "example" : "south-east",
          "description" : "Region of node instance"
        },
        "zone" : {
          "type" : "string",
          "example" : "south-east",
          "description" : "Zone of node instance"
        },
        "instanceType" : {
          "type" : "string",
          "example" : "c5large",
          "description" : "Instance type of node instance"
        },
        "instanceName" : {
          "type" : "string",
          "example" : "Mumbai instance",
          "description" : "Instance name of node instance"
        },
        "nodeName" : {
          "type" : "string",
          "example" : "India node",
          "description" : "Node name of node instance"
        }
      },
      "description" : "Detail of node instance"
    },
    "NodeActionFormData" : {
      "type" : "object",
      "required" : [ "nodeAction" ],
      "properties" : {
        "nodeAction" : {
          "type" : "string",
          "enum" : [ "ADD", "REMOVE", "START", "STOP", "DELETE", "QUERY", "RELEASE", "START_MASTER" ]
        }
      }
    },
    "NodeInstanceFormData" : {
      "type" : "object",
      "required" : [ "nodes" ],
      "properties" : {
        "nodes" : {
          "type" : "array",
          "description" : "Node instances",
          "items" : {
            "$ref" : "#/definitions/NodeInstanceData"
          }
        }
      }
    },
    "EditProviderRequest" : {
      "type" : "object",
      "required" : [ "config", "hostedZoneId" ],
      "properties" : {
        "hostedZoneId" : {
          "type" : "string"
        },
        "config" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "KubernetesProviderFormData" : {
      "type" : "object",
      "required" : [ "code", "config", "name", "region", "regionList" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "enum" : [ "unknown", "aws", "gcp", "azu", "docker", "onprem", "kubernetes", "local", "other" ]
        },
        "name" : {
          "type" : "string"
        },
        "config" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "region" : {
          "type" : "string"
        },
        "regionList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RegionData"
          }
        }
      }
    },
    "RegionData" : {
      "type" : "object",
      "required" : [ "code", "config", "latitude", "longitude", "name", "zoneList" ],
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "latitude" : {
          "type" : "number",
          "format" : "double"
        },
        "longitude" : {
          "type" : "number",
          "format" : "double"
        },
        "zoneList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ZoneData"
          }
        },
        "config" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ZoneData" : {
      "type" : "object",
      "required" : [ "code", "config", "name" ],
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "config" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "CertificateInfo" : {
      "type" : "object",
      "required" : [ "certType", "certificate", "checksum", "customCertInfo", "customServerCertInfo", "customerUUID", "expiryDate", "inUse", "label", "privateKey", "startDate", "universeDetails", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "customerUUID" : {
          "type" : "string",
          "format" : "uuid"
        },
        "label" : {
          "type" : "string"
        },
        "startDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "expiryDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "privateKey" : {
          "type" : "string"
        },
        "certificate" : {
          "type" : "string"
        },
        "certType" : {
          "type" : "string",
          "enum" : [ "SelfSigned", "CustomCertHostPath", "CustomServerCert" ]
        },
        "checksum" : {
          "type" : "string"
        },
        "customCertInfo" : {
          "$ref" : "#/definitions/CustomCertInfo"
        },
        "universeDetails" : {
          "$ref" : "#/definitions/ArrayNode"
        },
        "inUse" : {
          "type" : "boolean"
        },
        "customServerCertInfo" : {
          "$ref" : "#/definitions/CustomServerCertInfo"
        }
      }
    },
    "CustomCertInfo" : {
      "type" : "object",
      "required" : [ "clientCertPath", "clientKeyPath", "nodeCertPath", "nodeKeyPath", "rootCertPath" ],
      "properties" : {
        "nodeCertPath" : {
          "type" : "string"
        },
        "nodeKeyPath" : {
          "type" : "string"
        },
        "rootCertPath" : {
          "type" : "string"
        },
        "clientCertPath" : {
          "type" : "string"
        },
        "clientKeyPath" : {
          "type" : "string"
        }
      }
    },
    "CustomServerCertInfo" : {
      "type" : "object",
      "required" : [ "serverCert", "serverKey" ],
      "properties" : {
        "serverCert" : {
          "type" : "string"
        },
        "serverKey" : {
          "type" : "string"
        }
      }
    },
    "Release data" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "type" : "string",
          "example" : "ACTIVE",
          "description" : "Release state",
          "enum" : [ "ACTIVE", "DISABLED", "DELETED" ]
        },
        "notes" : {
          "type" : "array",
          "description" : "Release notes",
          "items" : {
            "type" : "string"
          }
        },
        "filePath" : {
          "type" : "string",
          "description" : "Release file path"
        },
        "imageTag" : {
          "type" : "string",
          "description" : "Release image tag"
        }
      },
      "description" : "Release data"
    },
    "ReleaseFormData" : {
      "type" : "object",
      "required" : [ "version" ],
      "properties" : {
        "version" : {
          "type" : "string"
        }
      }
    },
    "Column details" : {
      "type" : "object",
      "properties" : {
        "columnOrder" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Column order"
        },
        "name" : {
          "type" : "string",
          "description" : "Column name"
        },
        "type" : {
          "type" : "string",
          "description" : "Column type",
          "enum" : [ "TINYINT", "SMALLINT", "INT", "BIGINT", "VARCHAR", "BOOLEAN", "FLOAT", "DOUBLE_PRECISION", "BLOB", "TIMESTAMP", "DECIMAL", "VARINT", "INET", "LIST", "MAP", "SET", "UUID", "TIMEUUID", "FROZEN", "DATE", "TIME", "JSONB", "USER_DEFINED_TYPE" ]
        },
        "keyType" : {
          "type" : "string",
          "description" : "Column key type",
          "enum" : [ "TINYINT", "SMALLINT", "INT", "BIGINT", "VARCHAR", "BOOLEAN", "FLOAT", "DOUBLE_PRECISION", "BLOB", "TIMESTAMP", "DECIMAL", "VARINT", "INET", "LIST", "MAP", "SET", "UUID", "TIMEUUID", "FROZEN", "DATE", "TIME", "JSONB", "USER_DEFINED_TYPE" ]
        },
        "valueType" : {
          "type" : "string",
          "description" : "Column value name",
          "enum" : [ "TINYINT", "SMALLINT", "INT", "BIGINT", "VARCHAR", "BOOLEAN", "FLOAT", "DOUBLE_PRECISION", "BLOB", "TIMESTAMP", "DECIMAL", "VARINT", "INET", "LIST", "MAP", "SET", "UUID", "TIMEUUID", "FROZEN", "DATE", "TIME", "JSONB", "USER_DEFINED_TYPE" ]
        },
        "isPartitionKey" : {
          "type" : "boolean",
          "description" : "True if this column is a partition key"
        },
        "isClusteringKey" : {
          "type" : "boolean",
          "description" : "True if this column is a clustering key"
        },
        "sortOrder" : {
          "type" : "string",
          "description" : "SortOrder for this column",
          "enum" : [ "NONE", "ASC", "DESC" ]
        }
      },
      "description" : "Column details"
    },
    "Table details" : {
      "type" : "object",
      "properties" : {
        "tableName" : {
          "type" : "string",
          "description" : "Table name"
        },
        "keyspace" : {
          "type" : "string",
          "description" : "Keyspace that this table belongs to"
        },
        "ttlInSeconds" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The default table-level time to live"
        },
        "columns" : {
          "type" : "array",
          "description" : "Details of the columns that make up the table",
          "items" : {
            "$ref" : "#/definitions/Column details"
          }
        },
        "cqlcreateKeyspaceString" : {
          "type" : "string",
          "description" : "CQL create keyspace detail"
        },
        "cqluseKeyspaceString" : {
          "type" : "string",
          "description" : "CQL use keyspace detail"
        },
        "cqlcreateTableString" : {
          "type" : "string",
          "description" : "CQL create table detail"
        }
      },
      "description" : "Table details"
    },
    "Bulk import params" : {
      "type" : "object",
      "required" : [ "s3Bucket" ],
      "properties" : {
        "errorString" : {
          "type" : "string",
          "description" : "Error message"
        },
        "nodeExporterUser" : {
          "type" : "string",
          "description" : "Node exporter user"
        },
        "deviceInfo" : {
          "description" : "Device information",
          "$ref" : "#/definitions/Device info"
        },
        "universeUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Associate universe UUID"
        },
        "expectedUniverseVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Universe version"
        },
        "cmkArn" : {
          "type" : "string",
          "description" : "Amazon Resource Name (ARN) of the CMK"
        },
        "encryptionAtRestConfig" : {
          "description" : "Encryption at rest configation",
          "$ref" : "#/definitions/Encryption at rest config"
        },
        "nodeDetailsSet" : {
          "type" : "array",
          "description" : "Node details",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Node details"
          }
        },
        "communicationPorts" : {
          "description" : "Communication ports",
          "$ref" : "#/definitions/Communication ports"
        },
        "extraDependencies" : {
          "description" : "Extra dependencies",
          "$ref" : "#/definitions/Extra dependencies"
        },
        "firstTry" : {
          "type" : "boolean",
          "description" : "Whether this task has been tried before or not"
        },
        "keyspace" : {
          "type" : "string",
          "description" : "Key space"
        },
        "tableName" : {
          "type" : "string",
          "description" : "Table name"
        },
        "tableUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Table UUID"
        },
        "sse" : {
          "type" : "boolean",
          "description" : "Is SSE"
        },
        "s3Bucket" : {
          "type" : "string",
          "description" : "S3 bucket URL"
        },
        "instanceCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Instance count"
        },
        "targetAsyncReplicationRelationships" : {
          "type" : "array",
          "description" : "Async replication relationships as the target universe",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AsyncReplicationConfig"
          }
        },
        "sourceAsyncReplicationRelationships" : {
          "type" : "array",
          "description" : "Async replication relationships as the source universe",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AsyncReplicationConfig"
          }
        }
      },
      "description" : "Bulk import params"
    },
    "Backup table params" : {
      "type" : "object",
      "required" : [ "actionType", "storageConfigUUID" ],
      "properties" : {
        "errorString" : {
          "type" : "string",
          "description" : "Error message"
        },
        "nodeExporterUser" : {
          "type" : "string",
          "description" : "Node exporter user"
        },
        "deviceInfo" : {
          "description" : "Device information",
          "$ref" : "#/definitions/Device info"
        },
        "universeUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Associate universe UUID"
        },
        "expectedUniverseVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Universe version"
        },
        "cmkArn" : {
          "type" : "string",
          "description" : "Amazon Resource Name (ARN) of the CMK"
        },
        "encryptionAtRestConfig" : {
          "description" : "Encryption at rest configation",
          "$ref" : "#/definitions/Encryption at rest config"
        },
        "nodeDetailsSet" : {
          "type" : "array",
          "description" : "Node details",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Node details"
          }
        },
        "communicationPorts" : {
          "description" : "Communication ports",
          "$ref" : "#/definitions/Communication ports"
        },
        "extraDependencies" : {
          "description" : "Extra dependencies",
          "$ref" : "#/definitions/Extra dependencies"
        },
        "firstTry" : {
          "type" : "boolean",
          "description" : "Whether this task has been tried before or not"
        },
        "keyspace" : {
          "type" : "string",
          "description" : "Key space"
        },
        "tableName" : {
          "type" : "string",
          "description" : "Table name"
        },
        "tableUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Table UUID"
        },
        "sse" : {
          "type" : "boolean",
          "description" : "Is SSE"
        },
        "storageConfigUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Storage config UUID"
        },
        "kmsConfigUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "KMS config UUID"
        },
        "storageLocation" : {
          "type" : "string",
          "description" : "Storage location"
        },
        "actionType" : {
          "type" : "string",
          "description" : "Action type",
          "enum" : [ "CREATE", "RESTORE", "RESTORE_KEYS", "DELETE" ]
        },
        "backupType" : {
          "type" : "string",
          "description" : "Backup type",
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ]
        },
        "tableNameList" : {
          "type" : "array",
          "description" : "Tables",
          "items" : {
            "type" : "string"
          }
        },
        "tableUUIDList" : {
          "type" : "array",
          "description" : "Tables UUID's",
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "backupList" : {
          "type" : "array",
          "description" : "Backups",
          "items" : {
            "$ref" : "#/definitions/Backup table params"
          }
        },
        "schedulingFrequency" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Frequency for running the backup in milliseconds"
        },
        "cronExpression" : {
          "type" : "string",
          "description" : "Cron expression in case a recurring backup"
        },
        "timeBeforeDelete" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time in millisecs before deleting the backup from the storage"
        },
        "enableVerboseLogs" : {
          "type" : "boolean",
          "description" : "Is verbose logging is enable"
        },
        "transactionalBackup" : {
          "type" : "boolean",
          "description" : "Is backup be transactional across tables"
        },
        "parallelism" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of concurrent commands to run on nodes over SSH"
        },
        "scheduleUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Schedule UUID"
        },
        "targetAsyncReplicationRelationships" : {
          "type" : "array",
          "description" : "Async replication relationships as the target universe",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AsyncReplicationConfig"
          }
        },
        "sourceAsyncReplicationRelationships" : {
          "type" : "array",
          "description" : "Async replication relationships as the source universe",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AsyncReplicationConfig"
          }
        }
      },
      "description" : "Backup table params"
    },
    "TableInfo" : {
      "type" : "object",
      "properties" : {
        "tableUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Table UUID",
          "readOnly" : true
        },
        "keySpace" : {
          "type" : "string",
          "description" : "Key space"
        },
        "tableType" : {
          "type" : "string",
          "description" : "Table type",
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ]
        },
        "tableName" : {
          "type" : "string",
          "description" : "Table name"
        },
        "relationType" : {
          "type" : "string",
          "description" : "Relation type",
          "enum" : [ "SYSTEM_TABLE_RELATION", "USER_TABLE_RELATION", "INDEX_TABLE_RELATION" ]
        },
        "sizeBytes" : {
          "type" : "number",
          "format" : "double",
          "description" : "Size in bytes",
          "readOnly" : true
        }
      }
    },
    "Schedule" : {
      "type" : "object",
      "properties" : {
        "scheduleUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Schedule UUID",
          "readOnly" : true
        },
        "customerUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Customer UUID",
          "readOnly" : true
        },
        "failureCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of failed schedule",
          "readOnly" : true
        },
        "frequency" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Frequency of schedule"
        },
        "taskParams" : {
          "description" : "Schedule params",
          "$ref" : "#/definitions/JsonNode"
        },
        "taskType" : {
          "type" : "string",
          "description" : "Schedule Type",
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "MultiTableBackup", "EditUniverse", "EditKubernetesUniverse", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "SyncDBStateWithPlatform", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "PrecheckNode", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "CreateTable", "DeleteNode", "DeleteBackup", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupUniverseKeys", "RestoreUniverseKeys", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "UniverseSetTlsParams", "AsyncReplicationPlatformSync", "ResetUniverseVersion" ]
        },
        "status" : {
          "type" : "string",
          "description" : "Status of schedule",
          "enum" : [ "Active", "Paused", "Stopped" ]
        },
        "cronExpression" : {
          "type" : "string",
          "description" : "Cron expression for schedule"
        }
      },
      "description" : "Scheduled backup"
    },
    "Multi table backup request params" : {
      "type" : "object",
      "required" : [ "actionType", "storageConfigUUID" ],
      "properties" : {
        "errorString" : {
          "type" : "string",
          "description" : "Error message"
        },
        "nodeExporterUser" : {
          "type" : "string",
          "description" : "Node exporter user"
        },
        "deviceInfo" : {
          "description" : "Device information",
          "$ref" : "#/definitions/Device info"
        },
        "universeUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Associate universe UUID"
        },
        "expectedUniverseVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Universe version"
        },
        "cmkArn" : {
          "type" : "string",
          "description" : "Amazon Resource Name (ARN) of the CMK"
        },
        "encryptionAtRestConfig" : {
          "description" : "Encryption at rest configation",
          "$ref" : "#/definitions/Encryption at rest config"
        },
        "nodeDetailsSet" : {
          "type" : "array",
          "description" : "Node details",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Node details"
          }
        },
        "communicationPorts" : {
          "description" : "Communication ports",
          "$ref" : "#/definitions/Communication ports"
        },
        "extraDependencies" : {
          "description" : "Extra dependencies",
          "$ref" : "#/definitions/Extra dependencies"
        },
        "firstTry" : {
          "type" : "boolean",
          "description" : "Whether this task has been tried before or not"
        },
        "keyspace" : {
          "type" : "string",
          "description" : "Key space"
        },
        "tableName" : {
          "type" : "string",
          "description" : "Table name"
        },
        "tableUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Table UUID"
        },
        "sse" : {
          "type" : "boolean",
          "description" : "Is SSE"
        },
        "storageConfigUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Storage config UUID"
        },
        "kmsConfigUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "KMS config UUID"
        },
        "storageLocation" : {
          "type" : "string",
          "description" : "Storage location"
        },
        "actionType" : {
          "type" : "string",
          "description" : "Action type",
          "enum" : [ "CREATE", "RESTORE", "RESTORE_KEYS", "DELETE" ]
        },
        "backupType" : {
          "type" : "string",
          "description" : "Backup type",
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ]
        },
        "tableNameList" : {
          "type" : "array",
          "description" : "Tables",
          "items" : {
            "type" : "string"
          }
        },
        "tableUUIDList" : {
          "type" : "array",
          "description" : "Table UUID List",
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "backupList" : {
          "type" : "array",
          "description" : "Backups",
          "items" : {
            "$ref" : "#/definitions/Backup table params"
          }
        },
        "schedulingFrequency" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Frequency for running the backup in milliseconds"
        },
        "cronExpression" : {
          "type" : "string",
          "description" : "Cron expression in case a recurring backup"
        },
        "timeBeforeDelete" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time in millisecs before deleting the backup from the storage"
        },
        "enableVerboseLogs" : {
          "type" : "boolean",
          "description" : "Is verbose logging is enable"
        },
        "transactionalBackup" : {
          "type" : "boolean",
          "description" : "Is backup be transactional across tables"
        },
        "parallelism" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of concurrent commands to run on nodes over SSH"
        },
        "scheduleUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Schedule UUID"
        },
        "customerUUID" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Customer UUID"
        },
        "targetAsyncReplicationRelationships" : {
          "type" : "array",
          "description" : "Async replication relationships as the target universe",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AsyncReplicationConfig"
          }
        },
        "sourceAsyncReplicationRelationships" : {
          "type" : "array",
          "description" : "Async replication relationships as the source universe",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AsyncReplicationConfig"
          }
        }
      },
      "description" : "Backup table params"
    },
    "Configs entry" : {
      "type" : "object",
      "properties" : {
        "inherited" : {
          "type" : "boolean",
          "description" : "Is config inherited"
        },
        "key" : {
          "type" : "string",
          "description" : "Config key"
        },
        "value" : {
          "type" : "string",
          "description" : "Config value"
        }
      },
      "description" : "Configs entry"
    },
    "Runtime config data" : {
      "type" : "object",
      "properties" : {
        "scopedConfigList" : {
          "type" : "array",
          "description" : "list of scoped config",
          "items" : {
            "$ref" : "#/definitions/Scoped config"
          }
        }
      },
      "description" : "Runtime config data"
    },
    "Scoped config" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Scope type",
          "enum" : [ "GLOBAL", "CUSTOMER", "UNIVERSE", "PROVIDER" ]
        },
        "uuid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Scope UIID"
        },
        "mutableScope" : {
          "type" : "boolean",
          "description" : "Is scope mutable"
        },
        "configEntries" : {
          "type" : "array",
          "description" : "List of configs",
          "items" : {
            "$ref" : "#/definitions/Configs entry"
          }
        }
      },
      "description" : "Scoped config"
    }
  },
  "externalDocs" : {
    "description" : "About Yugabyte Platform",
    "url" : "https://docs.yugabyte.com"
  }
}